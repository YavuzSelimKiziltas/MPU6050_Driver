
MPU6050_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004780  08004780  00014780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c8  080047c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047d0  080047d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047d4  080047d4  000147d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001c0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000076bf  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001604  00000000  00000000  000277a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000748  00000000  00000000  00028da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000587  00000000  00000000  000294f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020611  00000000  00000000  00029a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a3f0  00000000  00000000  0004a088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2a43  00000000  00000000  00054478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000022a8  00000000  00000000  00116ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00119164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004768 	.word	0x08004768

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004768 	.word	0x08004768

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_uldivmod>:
 8000aa0:	b953      	cbnz	r3, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa2:	b94a      	cbnz	r2, 8000ab8 <__aeabi_uldivmod+0x18>
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	bf08      	it	eq
 8000aa8:	2800      	cmpeq	r0, #0
 8000aaa:	bf1c      	itt	ne
 8000aac:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab4:	f000 b970 	b.w	8000d98 <__aeabi_idiv0>
 8000ab8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000abc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac0:	f000 f806 	bl	8000ad0 <__udivmoddi4>
 8000ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000acc:	b004      	add	sp, #16
 8000ace:	4770      	bx	lr

08000ad0 <__udivmoddi4>:
 8000ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad4:	9e08      	ldr	r6, [sp, #32]
 8000ad6:	460d      	mov	r5, r1
 8000ad8:	4604      	mov	r4, r0
 8000ada:	460f      	mov	r7, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14a      	bne.n	8000b76 <__udivmoddi4+0xa6>
 8000ae0:	428a      	cmp	r2, r1
 8000ae2:	4694      	mov	ip, r2
 8000ae4:	d965      	bls.n	8000bb2 <__udivmoddi4+0xe2>
 8000ae6:	fab2 f382 	clz	r3, r2
 8000aea:	b143      	cbz	r3, 8000afe <__udivmoddi4+0x2e>
 8000aec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000af0:	f1c3 0220 	rsb	r2, r3, #32
 8000af4:	409f      	lsls	r7, r3
 8000af6:	fa20 f202 	lsr.w	r2, r0, r2
 8000afa:	4317      	orrs	r7, r2
 8000afc:	409c      	lsls	r4, r3
 8000afe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b02:	fa1f f58c 	uxth.w	r5, ip
 8000b06:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b0a:	0c22      	lsrs	r2, r4, #16
 8000b0c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b10:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b14:	fb01 f005 	mul.w	r0, r1, r5
 8000b18:	4290      	cmp	r0, r2
 8000b1a:	d90a      	bls.n	8000b32 <__udivmoddi4+0x62>
 8000b1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b20:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b24:	f080 811c 	bcs.w	8000d60 <__udivmoddi4+0x290>
 8000b28:	4290      	cmp	r0, r2
 8000b2a:	f240 8119 	bls.w	8000d60 <__udivmoddi4+0x290>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4462      	add	r2, ip
 8000b32:	1a12      	subs	r2, r2, r0
 8000b34:	b2a4      	uxth	r4, r4
 8000b36:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b3a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b3e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b42:	fb00 f505 	mul.w	r5, r0, r5
 8000b46:	42a5      	cmp	r5, r4
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x90>
 8000b4a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b52:	f080 8107 	bcs.w	8000d64 <__udivmoddi4+0x294>
 8000b56:	42a5      	cmp	r5, r4
 8000b58:	f240 8104 	bls.w	8000d64 <__udivmoddi4+0x294>
 8000b5c:	4464      	add	r4, ip
 8000b5e:	3802      	subs	r0, #2
 8000b60:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b64:	1b64      	subs	r4, r4, r5
 8000b66:	2100      	movs	r1, #0
 8000b68:	b11e      	cbz	r6, 8000b72 <__udivmoddi4+0xa2>
 8000b6a:	40dc      	lsrs	r4, r3
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e9c6 4300 	strd	r4, r3, [r6]
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0xbc>
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	f000 80ed 	beq.w	8000d5a <__udivmoddi4+0x28a>
 8000b80:	2100      	movs	r1, #0
 8000b82:	e9c6 0500 	strd	r0, r5, [r6]
 8000b86:	4608      	mov	r0, r1
 8000b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8c:	fab3 f183 	clz	r1, r3
 8000b90:	2900      	cmp	r1, #0
 8000b92:	d149      	bne.n	8000c28 <__udivmoddi4+0x158>
 8000b94:	42ab      	cmp	r3, r5
 8000b96:	d302      	bcc.n	8000b9e <__udivmoddi4+0xce>
 8000b98:	4282      	cmp	r2, r0
 8000b9a:	f200 80f8 	bhi.w	8000d8e <__udivmoddi4+0x2be>
 8000b9e:	1a84      	subs	r4, r0, r2
 8000ba0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d0e2      	beq.n	8000b72 <__udivmoddi4+0xa2>
 8000bac:	e9c6 4700 	strd	r4, r7, [r6]
 8000bb0:	e7df      	b.n	8000b72 <__udivmoddi4+0xa2>
 8000bb2:	b902      	cbnz	r2, 8000bb6 <__udivmoddi4+0xe6>
 8000bb4:	deff      	udf	#255	; 0xff
 8000bb6:	fab2 f382 	clz	r3, r2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x210>
 8000bc0:	1a8a      	subs	r2, r1, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f fe8c 	uxth.w	lr, ip
 8000bca:	2101      	movs	r1, #1
 8000bcc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bd0:	fb07 2015 	mls	r0, r7, r5, r2
 8000bd4:	0c22      	lsrs	r2, r4, #16
 8000bd6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bda:	fb0e f005 	mul.w	r0, lr, r5
 8000bde:	4290      	cmp	r0, r2
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x124>
 8000be2:	eb1c 0202 	adds.w	r2, ip, r2
 8000be6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x122>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f200 80cb 	bhi.w	8000d88 <__udivmoddi4+0x2b8>
 8000bf2:	4645      	mov	r5, r8
 8000bf4:	1a12      	subs	r2, r2, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bfc:	fb07 2210 	mls	r2, r7, r0, r2
 8000c00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c04:	fb0e fe00 	mul.w	lr, lr, r0
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x14e>
 8000c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c14:	d202      	bcs.n	8000c1c <__udivmoddi4+0x14c>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	f200 80bb 	bhi.w	8000d92 <__udivmoddi4+0x2c2>
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c26:	e79f      	b.n	8000b68 <__udivmoddi4+0x98>
 8000c28:	f1c1 0720 	rsb	r7, r1, #32
 8000c2c:	408b      	lsls	r3, r1
 8000c2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c36:	fa05 f401 	lsl.w	r4, r5, r1
 8000c3a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c3e:	40fd      	lsrs	r5, r7
 8000c40:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c44:	4323      	orrs	r3, r4
 8000c46:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c4a:	fa1f fe8c 	uxth.w	lr, ip
 8000c4e:	fb09 5518 	mls	r5, r9, r8, r5
 8000c52:	0c1c      	lsrs	r4, r3, #16
 8000c54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c58:	fb08 f50e 	mul.w	r5, r8, lr
 8000c5c:	42a5      	cmp	r5, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	fa00 f001 	lsl.w	r0, r0, r1
 8000c66:	d90b      	bls.n	8000c80 <__udivmoddi4+0x1b0>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c70:	f080 8088 	bcs.w	8000d84 <__udivmoddi4+0x2b4>
 8000c74:	42a5      	cmp	r5, r4
 8000c76:	f240 8085 	bls.w	8000d84 <__udivmoddi4+0x2b4>
 8000c7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7e:	4464      	add	r4, ip
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	b29d      	uxth	r5, r3
 8000c84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c88:	fb09 4413 	mls	r4, r9, r3, r4
 8000c8c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c90:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c94:	45a6      	cmp	lr, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x1da>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ca0:	d26c      	bcs.n	8000d7c <__udivmoddi4+0x2ac>
 8000ca2:	45a6      	cmp	lr, r4
 8000ca4:	d96a      	bls.n	8000d7c <__udivmoddi4+0x2ac>
 8000ca6:	3b02      	subs	r3, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cae:	fba3 9502 	umull	r9, r5, r3, r2
 8000cb2:	eba4 040e 	sub.w	r4, r4, lr
 8000cb6:	42ac      	cmp	r4, r5
 8000cb8:	46c8      	mov	r8, r9
 8000cba:	46ae      	mov	lr, r5
 8000cbc:	d356      	bcc.n	8000d6c <__udivmoddi4+0x29c>
 8000cbe:	d053      	beq.n	8000d68 <__udivmoddi4+0x298>
 8000cc0:	b156      	cbz	r6, 8000cd8 <__udivmoddi4+0x208>
 8000cc2:	ebb0 0208 	subs.w	r2, r0, r8
 8000cc6:	eb64 040e 	sbc.w	r4, r4, lr
 8000cca:	fa04 f707 	lsl.w	r7, r4, r7
 8000cce:	40ca      	lsrs	r2, r1
 8000cd0:	40cc      	lsrs	r4, r1
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	e9c6 7400 	strd	r7, r4, [r6]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce0:	f1c3 0120 	rsb	r1, r3, #32
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	fa20 f201 	lsr.w	r2, r0, r1
 8000cec:	fa25 f101 	lsr.w	r1, r5, r1
 8000cf0:	409d      	lsls	r5, r3
 8000cf2:	432a      	orrs	r2, r5
 8000cf4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf8:	fa1f fe8c 	uxth.w	lr, ip
 8000cfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d00:	fb07 1510 	mls	r5, r7, r0, r1
 8000d04:	0c11      	lsrs	r1, r2, #16
 8000d06:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d0a:	fb00 f50e 	mul.w	r5, r0, lr
 8000d0e:	428d      	cmp	r5, r1
 8000d10:	fa04 f403 	lsl.w	r4, r4, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x258>
 8000d16:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d1e:	d22f      	bcs.n	8000d80 <__udivmoddi4+0x2b0>
 8000d20:	428d      	cmp	r5, r1
 8000d22:	d92d      	bls.n	8000d80 <__udivmoddi4+0x2b0>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4461      	add	r1, ip
 8000d28:	1b49      	subs	r1, r1, r5
 8000d2a:	b292      	uxth	r2, r2
 8000d2c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d30:	fb07 1115 	mls	r1, r7, r5, r1
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	fb05 f10e 	mul.w	r1, r5, lr
 8000d3c:	4291      	cmp	r1, r2
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x282>
 8000d40:	eb1c 0202 	adds.w	r2, ip, r2
 8000d44:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d48:	d216      	bcs.n	8000d78 <__udivmoddi4+0x2a8>
 8000d4a:	4291      	cmp	r1, r2
 8000d4c:	d914      	bls.n	8000d78 <__udivmoddi4+0x2a8>
 8000d4e:	3d02      	subs	r5, #2
 8000d50:	4462      	add	r2, ip
 8000d52:	1a52      	subs	r2, r2, r1
 8000d54:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d58:	e738      	b.n	8000bcc <__udivmoddi4+0xfc>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e708      	b.n	8000b72 <__udivmoddi4+0xa2>
 8000d60:	4639      	mov	r1, r7
 8000d62:	e6e6      	b.n	8000b32 <__udivmoddi4+0x62>
 8000d64:	4610      	mov	r0, r2
 8000d66:	e6fb      	b.n	8000b60 <__udivmoddi4+0x90>
 8000d68:	4548      	cmp	r0, r9
 8000d6a:	d2a9      	bcs.n	8000cc0 <__udivmoddi4+0x1f0>
 8000d6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d70:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d74:	3b01      	subs	r3, #1
 8000d76:	e7a3      	b.n	8000cc0 <__udivmoddi4+0x1f0>
 8000d78:	4645      	mov	r5, r8
 8000d7a:	e7ea      	b.n	8000d52 <__udivmoddi4+0x282>
 8000d7c:	462b      	mov	r3, r5
 8000d7e:	e794      	b.n	8000caa <__udivmoddi4+0x1da>
 8000d80:	4640      	mov	r0, r8
 8000d82:	e7d1      	b.n	8000d28 <__udivmoddi4+0x258>
 8000d84:	46d0      	mov	r8, sl
 8000d86:	e77b      	b.n	8000c80 <__udivmoddi4+0x1b0>
 8000d88:	3d02      	subs	r5, #2
 8000d8a:	4462      	add	r2, ip
 8000d8c:	e732      	b.n	8000bf4 <__udivmoddi4+0x124>
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e70a      	b.n	8000ba8 <__udivmoddi4+0xd8>
 8000d92:	4464      	add	r4, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e742      	b.n	8000c1e <__udivmoddi4+0x14e>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <MPU6050_Init>:
 * @param Typedef structure that holds i2c handle, gyro and acclerometer data
 * @param Related I2C Handle
 * @retval Returns the number of errors during initialization
 * */
uint8_t MPU6050_Init(MPU6050 *dev, I2C_HandleTypeDef *hi2c)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
	dev->i2cHandle = hi2c;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	601a      	str	r2, [r3, #0]

	dev->accel_x = 0;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	809a      	strh	r2, [r3, #4]
	dev->accel_y = 0;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	80da      	strh	r2, [r3, #6]
	dev->accel_z = 0;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	811a      	strh	r2, [r3, #8]
	dev->gyro_x  = 0;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	815a      	strh	r2, [r3, #10]
	dev->gyro_y  = 0;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	819a      	strh	r2, [r3, #12]
	dev->gyro_z  = 0;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	81da      	strh	r2, [r3, #14]

	uint8_t errorNumber = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]
	uint8_t regData = 0x00;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;

	/* Perform Reset Sequence (Page 41) */
	status = MPU6050_ReadRegister(dev, MPU6050_PWR_MGMT_1, &regData);
 8000dd8:	f107 030d 	add.w	r3, r7, #13
 8000ddc:	461a      	mov	r2, r3
 8000dde:	216b      	movs	r1, #107	; 0x6b
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 fc13 	bl	800160c <MPU6050_ReadRegister>
 8000de6:	4603      	mov	r3, r0
 8000de8:	73bb      	strb	r3, [r7, #14]
	regData &= ~(1 << MPU6050_DEVICE_RESET);
 8000dea:	7b7b      	ldrb	r3, [r7, #13]
 8000dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, MPU6050_PWR_MGMT_1, &regData);
 8000df4:	f107 030d 	add.w	r3, r7, #13
 8000df8:	461a      	mov	r2, r3
 8000dfa:	216b      	movs	r1, #107	; 0x6b
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 fc3f 	bl	8001680 <MPU6050_WriteRegister>
 8000e02:	4603      	mov	r3, r0
 8000e04:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(100);
 8000e06:	2064      	movs	r0, #100	; 0x64
 8000e08:	f000 fe9a 	bl	8001b40 <HAL_Delay>
	errorNumber += (status != HAL_OK);
 8000e0c:	7bbb      	ldrb	r3, [r7, #14]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bf14      	ite	ne
 8000e12:	2301      	movne	r3, #1
 8000e14:	2300      	moveq	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	73fb      	strb	r3, [r7, #15]


	status = MPU6050_ReadRegister(dev, MPU6050_SIGNAL_PATH_RESET, &regData);
 8000e20:	f107 030d 	add.w	r3, r7, #13
 8000e24:	461a      	mov	r2, r3
 8000e26:	2168      	movs	r1, #104	; 0x68
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 fbef 	bl	800160c <MPU6050_ReadRegister>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73bb      	strb	r3, [r7, #14]
	regData &= ~(7 << 0);	// GYRO_RESET = ACCEL_RESET = TEMP_RESET = Bit 2:0
 8000e32:	7b7b      	ldrb	r3, [r7, #13]
 8000e34:	f023 0307 	bic.w	r3, r3, #7
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, MPU6050_SIGNAL_PATH_RESET, &regData);
 8000e3c:	f107 030d 	add.w	r3, r7, #13
 8000e40:	461a      	mov	r2, r3
 8000e42:	2168      	movs	r1, #104	; 0x68
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 fc1b 	bl	8001680 <MPU6050_WriteRegister>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(100);
 8000e4e:	2064      	movs	r0, #100	; 0x64
 8000e50:	f000 fe76 	bl	8001b40 <HAL_Delay>
	errorNumber += (status != HAL_OK);
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bf14      	ite	ne
 8000e5a:	2301      	movne	r3, #1
 8000e5c:	2300      	moveq	r3, #0
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	4413      	add	r3, r2
 8000e66:	73fb      	strb	r3, [r7, #15]

	regData |= (1 << MPU6050_CLK_PLL_XGYRO);	// Recommended Clock Source
 8000e68:	7b7b      	ldrb	r3, [r7, #13]
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	737b      	strb	r3, [r7, #13]
	regData &= ~(1 << MPU6050_SLEEP_ENABLE);	// Disable Sleep Enabled
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	737b      	strb	r3, [r7, #13]
	regData &= ~(1 << MPU6050_TEMP_DISABLE);	// Temperature Reading Enabled
 8000e7c:	7b7b      	ldrb	r3, [r7, #13]
 8000e7e:	f023 0308 	bic.w	r3, r3, #8
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	737b      	strb	r3, [r7, #13]

	status = MPU6050_WriteRegister(dev, MPU6050_PWR_MGMT_1, &regData);
 8000e86:	f107 030d 	add.w	r3, r7, #13
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	216b      	movs	r1, #107	; 0x6b
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 fbf6 	bl	8001680 <MPU6050_WriteRegister>
 8000e94:	4603      	mov	r3, r0
 8000e96:	73bb      	strb	r3, [r7, #14]
	errorNumber += (status != HAL_OK);
 8000e98:	7bbb      	ldrb	r3, [r7, #14]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	bf14      	ite	ne
 8000e9e:	2301      	movne	r3, #1
 8000ea0:	2300      	moveq	r3, #0
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	73fb      	strb	r3, [r7, #15]

	/* Gyroscope Settings (Page 14) */
	status = MPU6050_ReadRegister(dev, MPU6050_GYRO_CONFIG, &regData);
 8000eac:	f107 030d 	add.w	r3, r7, #13
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	211b      	movs	r1, #27
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 fba9 	bl	800160c <MPU6050_ReadRegister>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73bb      	strb	r3, [r7, #14]
	errorNumber += (status != HAL_OK);
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	bf14      	ite	ne
 8000ec4:	2301      	movne	r3, #1
 8000ec6:	2300      	moveq	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	461a      	mov	r2, r3
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	4413      	add	r3, r2
 8000ed0:	73fb      	strb	r3, [r7, #15]

	regData |= (MPU6050_GYRO_FS_250 << 3);
 8000ed2:	7b7b      	ldrb	r3, [r7, #13]
 8000ed4:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, MPU6050_GYRO_CONFIG, &regData);
 8000ed6:	f107 030d 	add.w	r3, r7, #13
 8000eda:	461a      	mov	r2, r3
 8000edc:	211b      	movs	r1, #27
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 fbce 	bl	8001680 <MPU6050_WriteRegister>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	73bb      	strb	r3, [r7, #14]
	errorNumber += (status != HAL_OK);
 8000ee8:	7bbb      	ldrb	r3, [r7, #14]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	bf14      	ite	ne
 8000eee:	2301      	movne	r3, #1
 8000ef0:	2300      	moveq	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	4413      	add	r3, r2
 8000efa:	73fb      	strb	r3, [r7, #15]

	/* Accelerometer Settings (Page 15) */
	status = MPU6050_ReadRegister(dev, MPU6050_ACCEL_CONFIG, &regData);
 8000efc:	f107 030d 	add.w	r3, r7, #13
 8000f00:	461a      	mov	r2, r3
 8000f02:	211c      	movs	r1, #28
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 fb81 	bl	800160c <MPU6050_ReadRegister>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	73bb      	strb	r3, [r7, #14]
	errorNumber += (status != HAL_OK);
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	4413      	add	r3, r2
 8000f20:	73fb      	strb	r3, [r7, #15]

	regData |= (MPU6050_ACCEL_FS_2 << 3);
 8000f22:	7b7b      	ldrb	r3, [r7, #13]
 8000f24:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, MPU6050_ACCEL_CONFIG, &regData);
 8000f26:	f107 030d 	add.w	r3, r7, #13
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	211c      	movs	r1, #28
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 fba6 	bl	8001680 <MPU6050_WriteRegister>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73bb      	strb	r3, [r7, #14]
	errorNumber += (status != HAL_OK);
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bf14      	ite	ne
 8000f3e:	2301      	movne	r3, #1
 8000f40:	2300      	moveq	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	4413      	add	r3, r2
 8000f4a:	73fb      	strb	r3, [r7, #15]


	/* Check if the address is correct */
	MPU6050_ReadRegister(dev, MPU6050_WHO_AM_I, &regData);
 8000f4c:	f107 030d 	add.w	r3, r7, #13
 8000f50:	461a      	mov	r2, r3
 8000f52:	2175      	movs	r1, #117	; 0x75
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fb59 	bl	800160c <MPU6050_ReadRegister>
	if(regData != 0x68)
 8000f5a:	7b7b      	ldrb	r3, [r7, #13]
 8000f5c:	2b68      	cmp	r3, #104	; 0x68
 8000f5e:	d001      	beq.n	8000f64 <MPU6050_Init+0x1c8>
		errorNumber = 255;
 8000f60:	23ff      	movs	r3, #255	; 0xff
 8000f62:	73fb      	strb	r3, [r7, #15]

	return errorNumber;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <MPU6050_Read_Gyro>:

	dev->gyro_z = (((int16_t)regData[12]) << 8) | regData[13];
}

void MPU6050_Read_Gyro(MPU6050 *dev, int16_t *gyro_x, int16_t *gyro_y, int16_t *gyro_z)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	603b      	str	r3, [r7, #0]
	uint8_t regData[6];

	MPU6050_ReadRegisters(dev, MPU6050_GYRO_XOUT_H, regData, 6);
 8000f7c:	f107 0210 	add.w	r2, r7, #16
 8000f80:	2306      	movs	r3, #6
 8000f82:	2143      	movs	r1, #67	; 0x43
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f000 fb5c 	bl	8001642 <MPU6050_ReadRegisters>

	*gyro_x = (((int16_t)regData[0]) << 8) | regData[1];
 8000f8a:	7c3b      	ldrb	r3, [r7, #16]
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	7c7b      	ldrb	r3, [r7, #17]
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	801a      	strh	r2, [r3, #0]

	*gyro_y = (((int16_t)regData[2]) << 8) | regData[3];
 8000f9c:	7cbb      	ldrb	r3, [r7, #18]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	7cfb      	ldrb	r3, [r7, #19]
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	801a      	strh	r2, [r3, #0]

	*gyro_z = (((int16_t)regData[4]) << 8) | regData[5];
 8000fae:	7d3b      	ldrb	r3, [r7, #20]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	7d7b      	ldrb	r3, [r7, #21]
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	801a      	strh	r2, [r3, #0]

	dev->gyro_x = *gyro_x;
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	815a      	strh	r2, [r3, #10]
	dev->gyro_y = *gyro_y;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	819a      	strh	r2, [r3, #12]
	dev->gyro_z = *gyro_z;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	81da      	strh	r2, [r3, #14]
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(MPU6050 *dev, int16_t *accel_x, int16_t *accel_y, int16_t *accel_z)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	603b      	str	r3, [r7, #0]
	uint8_t regData[6];

	MPU6050_ReadRegisters(dev, MPU6050_ACCEL_XOUT_H, regData, 6);
 8000ff4:	f107 0210 	add.w	r2, r7, #16
 8000ff8:	2306      	movs	r3, #6
 8000ffa:	213b      	movs	r1, #59	; 0x3b
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f000 fb20 	bl	8001642 <MPU6050_ReadRegisters>

	*accel_x = (((int16_t)regData[0]) << 8) | regData[1];
 8001002:	7c3b      	ldrb	r3, [r7, #16]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	7c7b      	ldrb	r3, [r7, #17]
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b21a      	sxth	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	801a      	strh	r2, [r3, #0]

	*accel_y = (((int16_t)regData[2]) << 8) | regData[3];
 8001014:	7cbb      	ldrb	r3, [r7, #18]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	7cfb      	ldrb	r3, [r7, #19]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21a      	sxth	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	801a      	strh	r2, [r3, #0]

	*accel_z = (((int16_t)regData[4]) << 8) | regData[5];
 8001026:	7d3b      	ldrb	r3, [r7, #20]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21a      	sxth	r2, r3
 800102c:	7d7b      	ldrb	r3, [r7, #21]
 800102e:	b21b      	sxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b21a      	sxth	r2, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	801a      	strh	r2, [r3, #0]

	dev->accel_x = *accel_x;
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	809a      	strh	r2, [r3, #4]
	dev->accel_y = *accel_y;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	80da      	strh	r2, [r3, #6]
	dev->accel_z = *accel_z;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	811a      	strh	r2, [r3, #8]
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <MPU6050_Gyro_SelfTest>:
	dev->temp = *temp;
}


void MPU6050_Gyro_SelfTest(MPU6050 *dev, double *xG_change, double *yG_change, double *zG_change)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b090      	sub	sp, #64	; 0x40
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	603b      	str	r3, [r7, #0]
	uint8_t regData = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	777b      	strb	r3, [r7, #29]
	int16_t X_STR, Y_STR, Z_STR;



	// Make sure Full Scale Range is +-250 dps & Self Test is enabled
	MPU6050_ReadRegister(dev, MPU6050_GYRO_CONFIG, &regData);
 8001072:	f107 031d 	add.w	r3, r7, #29
 8001076:	461a      	mov	r2, r3
 8001078:	211b      	movs	r1, #27
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 fac6 	bl	800160c <MPU6050_ReadRegister>
	regData |= (MPU6050_GYRO_FS_250 << 3);
 8001080:	7f7b      	ldrb	r3, [r7, #29]
 8001082:	777b      	strb	r3, [r7, #29]
	regData |= (1 << MPU6050_X_SELFTEST_EN) | (1 << MPU6050_Y_SELFTEST_EN) | (1 << MPU6050_Z_SELFTEST_EN);
 8001084:	7f7b      	ldrb	r3, [r7, #29]
 8001086:	f063 031f 	orn	r3, r3, #31
 800108a:	b2db      	uxtb	r3, r3
 800108c:	777b      	strb	r3, [r7, #29]
	MPU6050_WriteRegister(dev, MPU6050_GYRO_CONFIG, &regData);
 800108e:	f107 031d 	add.w	r3, r7, #29
 8001092:	461a      	mov	r2, r3
 8001094:	211b      	movs	r1, #27
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f000 faf2 	bl	8001680 <MPU6050_WriteRegister>

	// Gyroscope Output with Self-Test Enabled
	MPU6050_Read_Gyro(dev, &X_OUT_ST_EN, &Y_OUT_ST_EN, &Z_OUT_ST_EN);
 800109c:	f107 0316 	add.w	r3, r7, #22
 80010a0:	f107 0218 	add.w	r2, r7, #24
 80010a4:	f107 011a 	add.w	r1, r7, #26
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f7ff ff60 	bl	8000f6e <MPU6050_Read_Gyro>

	/* Read Self-Test Registers */
	MPU6050_ReadRegister(dev, MPU6050_SELF_TEST_X, &regData);
 80010ae:	f107 031d 	add.w	r3, r7, #29
 80010b2:	461a      	mov	r2, r3
 80010b4:	210d      	movs	r1, #13
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f000 faa8 	bl	800160c <MPU6050_ReadRegister>
	XG_TEST = regData & (0x1F);
 80010bc:	7f7b      	ldrb	r3, [r7, #29]
 80010be:	f003 031f 	and.w	r3, r3, #31
 80010c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	MPU6050_ReadRegister(dev, MPU6050_SELF_TEST_Y, &regData);
 80010c6:	f107 031d 	add.w	r3, r7, #29
 80010ca:	461a      	mov	r2, r3
 80010cc:	210e      	movs	r1, #14
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 fa9c 	bl	800160c <MPU6050_ReadRegister>
	YG_TEST = regData & (0x1F);
 80010d4:	7f7b      	ldrb	r3, [r7, #29]
 80010d6:	f003 031f 	and.w	r3, r3, #31
 80010da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	MPU6050_ReadRegister(dev, MPU6050_SELF_TEST_Z, &regData);
 80010de:	f107 031d 	add.w	r3, r7, #29
 80010e2:	461a      	mov	r2, r3
 80010e4:	210f      	movs	r1, #15
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f000 fa90 	bl	800160c <MPU6050_ReadRegister>
	ZG_TEST = regData & (0x1F);
 80010ec:	7f7b      	ldrb	r3, [r7, #29]
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	// Calculate Gyro_X Factory Trim Value
	if(XG_TEST == 0)
 80010f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d106      	bne.n	800110c <MPU6050_Gyro_SelfTest+0xac>
		X_FT = 0;
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800110a:	e018      	b.n	800113e <MPU6050_Gyro_SelfTest+0xde>
	else
		X_FT = 25 * 131 * pow(1.046, XG_TEST - 1);
 800110c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001110:	3b01      	subs	r3, #1
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f9aa 	bl	800046c <__aeabi_i2d>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	ec43 2b11 	vmov	d1, r2, r3
 8001120:	ed9f 0b69 	vldr	d0, [pc, #420]	; 80012c8 <MPU6050_Gyro_SelfTest+0x268>
 8001124:	f002 fbe8 	bl	80038f8 <pow>
 8001128:	ec51 0b10 	vmov	r0, r1, d0
 800112c:	a368      	add	r3, pc, #416	; (adr r3, 80012d0 <MPU6050_Gyro_SelfTest+0x270>)
 800112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001132:	f7ff fa05 	bl	8000540 <__aeabi_dmul>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Calculate Gyro_Y Factory Trim Value
	if(YG_TEST == 0)
 800113e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001142:	2b00      	cmp	r3, #0
 8001144:	d106      	bne.n	8001154 <MPU6050_Gyro_SelfTest+0xf4>
		Y_FT = 0;
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001152:	e018      	b.n	8001186 <MPU6050_Gyro_SelfTest+0x126>
	else
		Y_FT = -25 * 131 * pow(1.046, YG_TEST - 1);
 8001154:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001158:	3b01      	subs	r3, #1
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f986 	bl	800046c <__aeabi_i2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	ec43 2b11 	vmov	d1, r2, r3
 8001168:	ed9f 0b57 	vldr	d0, [pc, #348]	; 80012c8 <MPU6050_Gyro_SelfTest+0x268>
 800116c:	f002 fbc4 	bl	80038f8 <pow>
 8001170:	ec51 0b10 	vmov	r0, r1, d0
 8001174:	a358      	add	r3, pc, #352	; (adr r3, 80012d8 <MPU6050_Gyro_SelfTest+0x278>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff f9e1 	bl	8000540 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	// Calculate Gyro_Z Factory Trim Value
	if(ZG_TEST == 0)
 8001186:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800118a:	2b00      	cmp	r3, #0
 800118c:	d106      	bne.n	800119c <MPU6050_Gyro_SelfTest+0x13c>
		Z_FT = 0;
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	f04f 0300 	mov.w	r3, #0
 8001196:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800119a:	e018      	b.n	80011ce <MPU6050_Gyro_SelfTest+0x16e>
	else
		Z_FT = 25 * 131 * pow(1.046, ZG_TEST - 1);
 800119c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011a0:	3b01      	subs	r3, #1
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f962 	bl	800046c <__aeabi_i2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	ec43 2b11 	vmov	d1, r2, r3
 80011b0:	ed9f 0b45 	vldr	d0, [pc, #276]	; 80012c8 <MPU6050_Gyro_SelfTest+0x268>
 80011b4:	f002 fba0 	bl	80038f8 <pow>
 80011b8:	ec51 0b10 	vmov	r0, r1, d0
 80011bc:	a344      	add	r3, pc, #272	; (adr r3, 80012d0 <MPU6050_Gyro_SelfTest+0x270>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	f7ff f9bd 	bl	8000540 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28


	// Disable Self Test
	MPU6050_ReadRegister(dev, MPU6050_GYRO_CONFIG, &regData);
 80011ce:	f107 031d 	add.w	r3, r7, #29
 80011d2:	461a      	mov	r2, r3
 80011d4:	211b      	movs	r1, #27
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f000 fa18 	bl	800160c <MPU6050_ReadRegister>
	regData &= ~((1 << MPU6050_X_SELFTEST_EN) | (1 << MPU6050_Y_SELFTEST_EN) | (1 << MPU6050_Z_SELFTEST_EN));
 80011dc:	7f7b      	ldrb	r3, [r7, #29]
 80011de:	f003 031f 	and.w	r3, r3, #31
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	777b      	strb	r3, [r7, #29]
	MPU6050_WriteRegister(dev, MPU6050_GYRO_CONFIG, &regData);
 80011e6:	f107 031d 	add.w	r3, r7, #29
 80011ea:	461a      	mov	r2, r3
 80011ec:	211b      	movs	r1, #27
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 fa46 	bl	8001680 <MPU6050_WriteRegister>

	// Gyroscope Output with Self-Test Disabled
	MPU6050_Read_Gyro(dev, &X_OUT_ST_DIS, &Y_OUT_ST_DIS, &Z_OUT_ST_DIS);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	f107 0212 	add.w	r2, r7, #18
 80011fc:	f107 0114 	add.w	r1, r7, #20
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff feb4 	bl	8000f6e <MPU6050_Read_Gyro>

	/* Calculate Self Test Response (STR) */
	X_STR = X_OUT_ST_EN - X_OUT_ST_DIS;
 8001206:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800120a:	b29a      	uxth	r2, r3
 800120c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001210:	b29b      	uxth	r3, r3
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	b29b      	uxth	r3, r3
 8001216:	847b      	strh	r3, [r7, #34]	; 0x22
	Y_STR = Y_OUT_ST_EN - Y_OUT_ST_DIS;
 8001218:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800121c:	b29a      	uxth	r2, r3
 800121e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001222:	b29b      	uxth	r3, r3
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	b29b      	uxth	r3, r3
 8001228:	843b      	strh	r3, [r7, #32]
	Z_STR = Z_OUT_ST_EN - Z_OUT_ST_DIS;
 800122a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800122e:	b29a      	uxth	r2, r3
 8001230:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001234:	b29b      	uxth	r3, r3
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	b29b      	uxth	r3, r3
 800123a:	83fb      	strh	r3, [r7, #30]

	/* Change from Factory Trim of the Self-Test Response(%) */
	*xG_change = (X_STR - X_FT) / X_FT;
 800123c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f913 	bl	800046c <__aeabi_i2d>
 8001246:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800124a:	f7fe ffc1 	bl	80001d0 <__aeabi_dsub>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800125a:	f7ff fa9b 	bl	8000794 <__aeabi_ddiv>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	e9c1 2300 	strd	r2, r3, [r1]

	*yG_change = (Y_STR - Y_FT) / Y_FT;
 8001268:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f8fd 	bl	800046c <__aeabi_i2d>
 8001272:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001276:	f7fe ffab 	bl	80001d0 <__aeabi_dsub>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001286:	f7ff fa85 	bl	8000794 <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	e9c1 2300 	strd	r2, r3, [r1]

	*zG_change = (Z_STR - Z_FT) / Z_FT;
 8001294:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f8e7 	bl	800046c <__aeabi_i2d>
 800129e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012a2:	f7fe ff95 	bl	80001d0 <__aeabi_dsub>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012b2:	f7ff fa6f 	bl	8000794 <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	e9c1 2300 	strd	r2, r3, [r1]
}
 80012c0:	bf00      	nop
 80012c2:	3740      	adds	r7, #64	; 0x40
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	7ef9db23 	.word	0x7ef9db23
 80012cc:	3ff0bc6a 	.word	0x3ff0bc6a
 80012d0:	00000000 	.word	0x00000000
 80012d4:	40a99600 	.word	0x40a99600
 80012d8:	00000000 	.word	0x00000000
 80012dc:	c0a99600 	.word	0xc0a99600

080012e0 <MPU6050_Accel_SelfTest>:

void MPU6050_Accel_SelfTest(MPU6050 *dev, double *xA_change, double *yA_change, double *zA_change)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b092      	sub	sp, #72	; 0x48
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
	uint8_t regData = 0x00;
 80012ee:	2300      	movs	r3, #0
 80012f0:	77fb      	strb	r3, [r7, #31]
	int16_t X_STR, Y_STR, Z_STR;



	// Make sure Full Scale Range is +-8 g & Self Test is enabled
	MPU6050_ReadRegister(dev, MPU6050_ACCEL_CONFIG, &regData);
 80012f2:	f107 031f 	add.w	r3, r7, #31
 80012f6:	461a      	mov	r2, r3
 80012f8:	211c      	movs	r1, #28
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f000 f986 	bl	800160c <MPU6050_ReadRegister>
	regData |= (MPU6050_ACCEL_FS_8 << 3);
 8001300:	7ffb      	ldrb	r3, [r7, #31]
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	b2db      	uxtb	r3, r3
 8001308:	77fb      	strb	r3, [r7, #31]
	regData |= (1 << MPU6050_X_SELFTEST_EN) | (1 << MPU6050_Y_SELFTEST_EN) | (1 << MPU6050_Z_SELFTEST_EN);
 800130a:	7ffb      	ldrb	r3, [r7, #31]
 800130c:	f063 031f 	orn	r3, r3, #31
 8001310:	b2db      	uxtb	r3, r3
 8001312:	77fb      	strb	r3, [r7, #31]
	MPU6050_WriteRegister(dev, MPU6050_ACCEL_CONFIG, &regData);
 8001314:	f107 031f 	add.w	r3, r7, #31
 8001318:	461a      	mov	r2, r3
 800131a:	211c      	movs	r1, #28
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f000 f9af 	bl	8001680 <MPU6050_WriteRegister>

	// Accelerometer Output with Self-Test Enabled
	MPU6050_Read_Accel(dev, &X_OUT_ST_EN, &Y_OUT_ST_EN, &Z_OUT_ST_EN);
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	f107 021a 	add.w	r2, r7, #26
 800132a:	f107 011c 	add.w	r1, r7, #28
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7ff fe59 	bl	8000fe6 <MPU6050_Read_Accel>

	/* Read Self-Test Registers */
	MPU6050_ReadRegister(dev, MPU6050_SELF_TEST_X, &regData);
 8001334:	f107 031f 	add.w	r3, r7, #31
 8001338:	461a      	mov	r2, r3
 800133a:	210d      	movs	r1, #13
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f000 f965 	bl	800160c <MPU6050_ReadRegister>
	XA_TEST_HIGH = (regData & (0xE0)) >> 5;
 8001342:	7ffb      	ldrb	r3, [r7, #31]
 8001344:	095b      	lsrs	r3, r3, #5
 8001346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	MPU6050_ReadRegister(dev, MPU6050_SELF_TEST_A, &regData);
 800134a:	f107 031f 	add.w	r3, r7, #31
 800134e:	461a      	mov	r2, r3
 8001350:	2110      	movs	r1, #16
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 f95a 	bl	800160c <MPU6050_ReadRegister>
	XA_TEST_LOW  = (regData & (0x30)) >> 4;
 8001358:	7ffb      	ldrb	r3, [r7, #31]
 800135a:	111b      	asrs	r3, r3, #4
 800135c:	b2db      	uxtb	r3, r3
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	MPU6050_ReadRegister(dev, MPU6050_SELF_TEST_Y, &regData);
 8001366:	f107 031f 	add.w	r3, r7, #31
 800136a:	461a      	mov	r2, r3
 800136c:	210e      	movs	r1, #14
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 f94c 	bl	800160c <MPU6050_ReadRegister>
	YA_TEST_HIGH = (regData & (0xE0)) >> 5;
 8001374:	7ffb      	ldrb	r3, [r7, #31]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	MPU6050_ReadRegister(dev, MPU6050_SELF_TEST_A, &regData);
 800137c:	f107 031f 	add.w	r3, r7, #31
 8001380:	461a      	mov	r2, r3
 8001382:	2110      	movs	r1, #16
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 f941 	bl	800160c <MPU6050_ReadRegister>
	YA_TEST_LOW  = (regData & (0x0C)) >> 2;
 800138a:	7ffb      	ldrb	r3, [r7, #31]
 800138c:	109b      	asrs	r3, r3, #2
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	MPU6050_ReadRegister(dev, MPU6050_SELF_TEST_Z, &regData);
 8001398:	f107 031f 	add.w	r3, r7, #31
 800139c:	461a      	mov	r2, r3
 800139e:	210f      	movs	r1, #15
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 f933 	bl	800160c <MPU6050_ReadRegister>
	ZA_TEST_HIGH = (regData & (0xE0)) >> 5;
 80013a6:	7ffb      	ldrb	r3, [r7, #31]
 80013a8:	095b      	lsrs	r3, r3, #5
 80013aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	MPU6050_ReadRegister(dev, MPU6050_SELF_TEST_A, &regData);
 80013ae:	f107 031f 	add.w	r3, r7, #31
 80013b2:	461a      	mov	r2, r3
 80013b4:	2110      	movs	r1, #16
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 f928 	bl	800160c <MPU6050_ReadRegister>
	ZA_TEST_LOW  = regData & (0x03);
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	XA_TEST = (XA_TEST_HIGH << 2) + XA_TEST_LOW;
 80013c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80013d2:	4413      	add	r3, r2
 80013d4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	YA_TEST = (YA_TEST_HIGH << 2) + YA_TEST_LOW;
 80013d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013e4:	4413      	add	r3, r2
 80013e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	ZA_TEST = (ZA_TEST_HIGH << 2) + ZA_TEST_LOW;
 80013ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80013f6:	4413      	add	r3, r2
 80013f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// Calculate Accel_X Factory Trim Value
	if(XA_TEST == 0)
 80013fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001400:	2b00      	cmp	r3, #0
 8001402:	d106      	bne.n	8001412 <MPU6050_Accel_SelfTest+0x132>
		X_FT = 0;
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001410:	e01f      	b.n	8001452 <MPU6050_Accel_SelfTest+0x172>
	else
		X_FT = 4096 * 0.34 * pow(0.92 / 0.34, (XA_TEST - 1) / 30);
 8001412:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001416:	3b01      	subs	r3, #1
 8001418:	4a7b      	ldr	r2, [pc, #492]	; (8001608 <MPU6050_Accel_SelfTest+0x328>)
 800141a:	fb82 1203 	smull	r1, r2, r2, r3
 800141e:	441a      	add	r2, r3
 8001420:	1112      	asrs	r2, r2, #4
 8001422:	17db      	asrs	r3, r3, #31
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f820 	bl	800046c <__aeabi_i2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	ec43 2b11 	vmov	d1, r2, r3
 8001434:	ed9f 0b70 	vldr	d0, [pc, #448]	; 80015f8 <MPU6050_Accel_SelfTest+0x318>
 8001438:	f002 fa5e 	bl	80038f8 <pow>
 800143c:	ec51 0b10 	vmov	r0, r1, d0
 8001440:	a36f      	add	r3, pc, #444	; (adr r3, 8001600 <MPU6050_Accel_SelfTest+0x320>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f87b 	bl	8000540 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	// Calculate Accel_Y Factory Trim Value
	if(YA_TEST == 0)
 8001452:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001456:	2b00      	cmp	r3, #0
 8001458:	d106      	bne.n	8001468 <MPU6050_Accel_SelfTest+0x188>
		Y_FT = 0;
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001466:	e01f      	b.n	80014a8 <MPU6050_Accel_SelfTest+0x1c8>
	else
		Y_FT = 4096 * 0.34 * pow(0.92 / 0.34, (YA_TEST - 1) / 30);
 8001468:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800146c:	3b01      	subs	r3, #1
 800146e:	4a66      	ldr	r2, [pc, #408]	; (8001608 <MPU6050_Accel_SelfTest+0x328>)
 8001470:	fb82 1203 	smull	r1, r2, r2, r3
 8001474:	441a      	add	r2, r3
 8001476:	1112      	asrs	r2, r2, #4
 8001478:	17db      	asrs	r3, r3, #31
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe fff5 	bl	800046c <__aeabi_i2d>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	ec43 2b11 	vmov	d1, r2, r3
 800148a:	ed9f 0b5b 	vldr	d0, [pc, #364]	; 80015f8 <MPU6050_Accel_SelfTest+0x318>
 800148e:	f002 fa33 	bl	80038f8 <pow>
 8001492:	ec51 0b10 	vmov	r0, r1, d0
 8001496:	a35a      	add	r3, pc, #360	; (adr r3, 8001600 <MPU6050_Accel_SelfTest+0x320>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff f850 	bl	8000540 <__aeabi_dmul>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	// Calculate Accel_Z Factory Trim Value
	if(ZA_TEST == 0)
 80014a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d106      	bne.n	80014be <MPU6050_Accel_SelfTest+0x1de>
		Z_FT = 0;
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80014bc:	e01f      	b.n	80014fe <MPU6050_Accel_SelfTest+0x21e>
	else
		Z_FT = 4096 * 0.34 * pow(0.92 / 0.34, (ZA_TEST - 1) / 30);
 80014be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014c2:	3b01      	subs	r3, #1
 80014c4:	4a50      	ldr	r2, [pc, #320]	; (8001608 <MPU6050_Accel_SelfTest+0x328>)
 80014c6:	fb82 1203 	smull	r1, r2, r2, r3
 80014ca:	441a      	add	r2, r3
 80014cc:	1112      	asrs	r2, r2, #4
 80014ce:	17db      	asrs	r3, r3, #31
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe ffca 	bl	800046c <__aeabi_i2d>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	ec43 2b11 	vmov	d1, r2, r3
 80014e0:	ed9f 0b45 	vldr	d0, [pc, #276]	; 80015f8 <MPU6050_Accel_SelfTest+0x318>
 80014e4:	f002 fa08 	bl	80038f8 <pow>
 80014e8:	ec51 0b10 	vmov	r0, r1, d0
 80014ec:	a344      	add	r3, pc, #272	; (adr r3, 8001600 <MPU6050_Accel_SelfTest+0x320>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f825 	bl	8000540 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30


	// Disable Self Test
	MPU6050_ReadRegister(dev, MPU6050_ACCEL_CONFIG, &regData);
 80014fe:	f107 031f 	add.w	r3, r7, #31
 8001502:	461a      	mov	r2, r3
 8001504:	211c      	movs	r1, #28
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f880 	bl	800160c <MPU6050_ReadRegister>
	regData &= ~((1 << MPU6050_X_SELFTEST_EN) | (1 << MPU6050_Y_SELFTEST_EN) | (1 << MPU6050_Z_SELFTEST_EN));
 800150c:	7ffb      	ldrb	r3, [r7, #31]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	b2db      	uxtb	r3, r3
 8001514:	77fb      	strb	r3, [r7, #31]
	MPU6050_WriteRegister(dev, MPU6050_ACCEL_CONFIG, &regData);
 8001516:	f107 031f 	add.w	r3, r7, #31
 800151a:	461a      	mov	r2, r3
 800151c:	211c      	movs	r1, #28
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 f8ae 	bl	8001680 <MPU6050_WriteRegister>

	// Accelerometer Output with Self-Test Disabled
	MPU6050_Read_Accel(dev, &X_OUT_ST_DIS, &Y_OUT_ST_DIS, &Z_OUT_ST_DIS);
 8001524:	f107 0312 	add.w	r3, r7, #18
 8001528:	f107 0214 	add.w	r2, r7, #20
 800152c:	f107 0116 	add.w	r1, r7, #22
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff fd58 	bl	8000fe6 <MPU6050_Read_Accel>

	/* Calculate Self Test Response (STR) */
	X_STR = X_OUT_ST_EN - X_OUT_ST_DIS;
 8001536:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800153a:	b29a      	uxth	r2, r3
 800153c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001540:	b29b      	uxth	r3, r3
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	b29b      	uxth	r3, r3
 8001546:	84bb      	strh	r3, [r7, #36]	; 0x24
	Y_STR = Y_OUT_ST_EN - Y_OUT_ST_DIS;
 8001548:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800154c:	b29a      	uxth	r2, r3
 800154e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001552:	b29b      	uxth	r3, r3
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	847b      	strh	r3, [r7, #34]	; 0x22
	Z_STR = Z_OUT_ST_EN - Z_OUT_ST_DIS;
 800155a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800155e:	b29a      	uxth	r2, r3
 8001560:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001564:	b29b      	uxth	r3, r3
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	b29b      	uxth	r3, r3
 800156a:	843b      	strh	r3, [r7, #32]

	/* Change from Factory Trim of the Self-Test Response(%) */
	*xA_change = (X_STR - X_FT) / X_FT;
 800156c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ff7b 	bl	800046c <__aeabi_i2d>
 8001576:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800157a:	f7fe fe29 	bl	80001d0 <__aeabi_dsub>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800158a:	f7ff f903 	bl	8000794 <__aeabi_ddiv>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	e9c1 2300 	strd	r2, r3, [r1]

	*yA_change = (Y_STR - Y_FT) / Y_FT;
 8001598:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ff65 	bl	800046c <__aeabi_i2d>
 80015a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015a6:	f7fe fe13 	bl	80001d0 <__aeabi_dsub>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015b6:	f7ff f8ed 	bl	8000794 <__aeabi_ddiv>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	e9c1 2300 	strd	r2, r3, [r1]

	*zA_change = (Z_STR - Z_FT) / Z_FT;
 80015c4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ff4f 	bl	800046c <__aeabi_i2d>
 80015ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015d2:	f7fe fdfd 	bl	80001d0 <__aeabi_dsub>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015e2:	f7ff f8d7 	bl	8000794 <__aeabi_ddiv>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	e9c1 2300 	strd	r2, r3, [r1]
}
 80015f0:	bf00      	nop
 80015f2:	3748      	adds	r7, #72	; 0x48
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	a5a5a5a5 	.word	0xa5a5a5a5
 80015fc:	4005a5a5 	.word	0x4005a5a5
 8001600:	5c28f5c3 	.word	0x5c28f5c3
 8001604:	4095c28f 	.word	0x4095c28f
 8001608:	88888889 	.word	0x88888889

0800160c <MPU6050_ReadRegister>:



HAL_StatusTypeDef MPU6050_ReadRegister(MPU6050 *dev, uint8_t reg, uint8_t *data)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af04      	add	r7, sp, #16
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	460b      	mov	r3, r1
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	7afb      	ldrb	r3, [r7, #11]
 8001620:	b29a      	uxth	r2, r3
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	2301      	movs	r3, #1
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2301      	movs	r3, #1
 8001632:	21d0      	movs	r1, #208	; 0xd0
 8001634:	f000 ff68 	bl	8002508 <HAL_I2C_Mem_Read>
 8001638:	4603      	mov	r3, r0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <MPU6050_ReadRegisters>:

HAL_StatusTypeDef MPU6050_ReadRegisters(MPU6050 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b088      	sub	sp, #32
 8001646:	af04      	add	r7, sp, #16
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	461a      	mov	r2, r3
 800164e:	460b      	mov	r3, r1
 8001650:	72fb      	strb	r3, [r7, #11]
 8001652:	4613      	mov	r3, r2
 8001654:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	7afb      	ldrb	r3, [r7, #11]
 800165c:	b29a      	uxth	r2, r3
 800165e:	7abb      	ldrb	r3, [r7, #10]
 8001660:	b29b      	uxth	r3, r3
 8001662:	f04f 31ff 	mov.w	r1, #4294967295
 8001666:	9102      	str	r1, [sp, #8]
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	21d0      	movs	r1, #208	; 0xd0
 8001672:	f000 ff49 	bl	8002508 <HAL_I2C_Mem_Read>
 8001676:	4603      	mov	r3, r0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <MPU6050_WriteRegister>:

HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050 *dev, uint8_t reg, uint8_t *data)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af04      	add	r7, sp, #16
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	460b      	mov	r3, r1
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(dev->i2cHandle, MPU6050_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	7afb      	ldrb	r3, [r7, #11]
 8001694:	b29a      	uxth	r2, r3
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	21d0      	movs	r1, #208	; 0xd0
 80016a8:	f000 fe34 	bl	8002314 <HAL_I2C_Mem_Write>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_GPIO_Init+0x68>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a16      	ldr	r2, [pc, #88]	; (8001720 <MX_GPIO_Init+0x68>)
 80016c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_GPIO_Init+0x68>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_GPIO_Init+0x68>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <MX_GPIO_Init+0x68>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <MX_GPIO_Init+0x68>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_GPIO_Init+0x68>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <MX_GPIO_Init+0x68>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_GPIO_Init+0x68>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_I2C1_Init+0x50>)
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <MX_I2C1_Init+0x54>)
 800172c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_I2C1_Init+0x50>)
 8001730:	4a12      	ldr	r2, [pc, #72]	; (800177c <MX_I2C1_Init+0x58>)
 8001732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_I2C1_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_I2C1_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_I2C1_Init+0x50>)
 8001742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <MX_I2C1_Init+0x50>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_I2C1_Init+0x50>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <MX_I2C1_Init+0x50>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_I2C1_Init+0x50>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <MX_I2C1_Init+0x50>)
 8001762:	f000 fc93 	bl	800208c <HAL_I2C_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800176c:	f000 f8e2 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000008c 	.word	0x2000008c
 8001778:	40005400 	.word	0x40005400
 800177c:	00061a80 	.word	0x00061a80

08001780 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_I2C_MspInit+0x84>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d12b      	bne.n	80017fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_I2C_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <HAL_I2C_MspInit+0x88>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_I2C_MspInit+0x88>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017be:	23c0      	movs	r3, #192	; 0xc0
 80017c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c2:	2312      	movs	r3, #18
 80017c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ce:	2304      	movs	r3, #4
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <HAL_I2C_MspInit+0x8c>)
 80017da:	f000 fabb 	bl	8001d54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_I2C_MspInit+0x88>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_I2C_MspInit+0x88>)
 80017e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ec:	6413      	str	r3, [r2, #64]	; 0x40
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_I2C_MspInit+0x88>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40005400 	.word	0x40005400
 8001808:	40023800 	.word	0x40023800
 800180c:	40020400 	.word	0x40020400

08001810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	; 0x30
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001816:	f000 f921 	bl	8001a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181a:	f000 f821 	bl	8001860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800181e:	f7ff ff4b 	bl	80016b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001822:	f7ff ff7f 	bl	8001724 <MX_I2C1_Init>
  MPU6050_Init(&mpu6050, &hi2c1);
 8001826:	490c      	ldr	r1, [pc, #48]	; (8001858 <main+0x48>)
 8001828:	480c      	ldr	r0, [pc, #48]	; (800185c <main+0x4c>)
 800182a:	f7ff fab7 	bl	8000d9c <MPU6050_Init>

//	  MPU6050_Read_Accel(&mpu6050, &accel_x, &accel_y, &accel_z);

//	  MPU6050_Read_All(&mpu6050);

	  MPU6050_Gyro_SelfTest(&mpu6050, &xG_change, &yG_change, &zG_change);
 800182e:	f107 0318 	add.w	r3, r7, #24
 8001832:	f107 0220 	add.w	r2, r7, #32
 8001836:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800183a:	4808      	ldr	r0, [pc, #32]	; (800185c <main+0x4c>)
 800183c:	f7ff fc10 	bl	8001060 <MPU6050_Gyro_SelfTest>

	  MPU6050_Accel_SelfTest(&mpu6050, &xA_change, &yA_change, &zA_change);
 8001840:	463b      	mov	r3, r7
 8001842:	f107 0208 	add.w	r2, r7, #8
 8001846:	f107 0110 	add.w	r1, r7, #16
 800184a:	4804      	ldr	r0, [pc, #16]	; (800185c <main+0x4c>)
 800184c:	f7ff fd48 	bl	80012e0 <MPU6050_Accel_SelfTest>

	  HAL_Delay(100);
 8001850:	2064      	movs	r0, #100	; 0x64
 8001852:	f000 f975 	bl	8001b40 <HAL_Delay>
	  MPU6050_Gyro_SelfTest(&mpu6050, &xG_change, &yG_change, &zG_change);
 8001856:	e7ea      	b.n	800182e <main+0x1e>
 8001858:	2000008c 	.word	0x2000008c
 800185c:	200000e0 	.word	0x200000e0

08001860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b094      	sub	sp, #80	; 0x50
 8001864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001866:	f107 0320 	add.w	r3, r7, #32
 800186a:	2230      	movs	r2, #48	; 0x30
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f002 f810 	bl	8003894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	4b28      	ldr	r3, [pc, #160]	; (800192c <SystemClock_Config+0xcc>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	4a27      	ldr	r2, [pc, #156]	; (800192c <SystemClock_Config+0xcc>)
 800188e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001892:	6413      	str	r3, [r2, #64]	; 0x40
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <SystemClock_Config+0xcc>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <SystemClock_Config+0xd0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a21      	ldr	r2, [pc, #132]	; (8001930 <SystemClock_Config+0xd0>)
 80018aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <SystemClock_Config+0xd0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018bc:	2302      	movs	r3, #2
 80018be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c0:	2301      	movs	r3, #1
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c4:	2310      	movs	r3, #16
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c8:	2302      	movs	r3, #2
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018cc:	2300      	movs	r3, #0
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018d0:	2308      	movs	r3, #8
 80018d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018d4:	23a8      	movs	r3, #168	; 0xa8
 80018d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d8:	2302      	movs	r3, #2
 80018da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018dc:	2304      	movs	r3, #4
 80018de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e0:	f107 0320 	add.w	r3, r7, #32
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 fb91 	bl	800300c <HAL_RCC_OscConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018f0:	f000 f820 	bl	8001934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f4:	230f      	movs	r3, #15
 80018f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f8:	2302      	movs	r3, #2
 80018fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001900:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	2105      	movs	r1, #5
 8001912:	4618      	mov	r0, r3
 8001914:	f001 fdf2 	bl	80034fc <HAL_RCC_ClockConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800191e:	f000 f809 	bl	8001934 <Error_Handler>
  }
}
 8001922:	bf00      	nop
 8001924:	3750      	adds	r7, #80	; 0x50
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	40007000 	.word	0x40007000

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800193c:	e7fe      	b.n	800193c <Error_Handler+0x8>
	...

08001940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_MspInit+0x4c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_MspInit+0x4c>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_MspInit+0x4c>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_MspInit+0x4c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_MspInit+0x4c>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_MspInit+0x4c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <NMI_Handler+0x4>

08001996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <HardFault_Handler+0x4>

0800199c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <MemManage_Handler+0x4>

080019a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <BusFault_Handler+0x4>

080019a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <UsageFault_Handler+0x4>

080019ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019dc:	f000 f890 	bl	8001b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a0c:	480d      	ldr	r0, [pc, #52]	; (8001a44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a0e:	490e      	ldr	r1, [pc, #56]	; (8001a48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a10:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a14:	e002      	b.n	8001a1c <LoopCopyDataInit>

08001a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1a:	3304      	adds	r3, #4

08001a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a20:	d3f9      	bcc.n	8001a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a24:	4c0b      	ldr	r4, [pc, #44]	; (8001a54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a28:	e001      	b.n	8001a2e <LoopFillZerobss>

08001a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a2c:	3204      	adds	r2, #4

08001a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a30:	d3fb      	bcc.n	8001a2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a32:	f7ff ffd7 	bl	80019e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a36:	f001 ff3b 	bl	80038b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3a:	f7ff fee9 	bl	8001810 <main>
  bx  lr    
 8001a3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a4c:	080047d8 	.word	0x080047d8
  ldr r2, =_sbss
 8001a50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a54:	20000230 	.word	0x20000230

08001a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <HAL_Init+0x40>)
 8001a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_Init+0x40>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_Init+0x40>)
 8001a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_Init+0x40>)
 8001a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f000 f931 	bl	8001cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8a:	200f      	movs	r0, #15
 8001a8c:	f000 f808 	bl	8001aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a90:	f7ff ff56 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_InitTick+0x54>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_InitTick+0x58>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f93b 	bl	8001d3a <HAL_SYSTICK_Config>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00e      	b.n	8001aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d80a      	bhi.n	8001aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f000 f911 	bl	8001d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae0:	4a06      	ldr	r2, [pc, #24]	; (8001afc <HAL_InitTick+0x5c>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e000      	b.n	8001aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000008 	.word	0x20000008
 8001afc:	20000004 	.word	0x20000004

08001b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x20>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x24>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_IncTick+0x24>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000008 	.word	0x20000008
 8001b24:	200000f4 	.word	0x200000f4

08001b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_GetTick+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	200000f4 	.word	0x200000f4

08001b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b48:	f7ff ffee 	bl	8001b28 <HAL_GetTick>
 8001b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d005      	beq.n	8001b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_Delay+0x44>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b66:	bf00      	nop
 8001b68:	f7ff ffde 	bl	8001b28 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d8f7      	bhi.n	8001b68 <HAL_Delay+0x28>
  {
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008

08001b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	f003 0307 	and.w	r3, r3, #7
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	db0a      	blt.n	8001c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	490c      	ldr	r1, [pc, #48]	; (8001c38 <__NVIC_SetPriority+0x4c>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	0112      	lsls	r2, r2, #4
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c14:	e00a      	b.n	8001c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4908      	ldr	r1, [pc, #32]	; (8001c3c <__NVIC_SetPriority+0x50>)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	3b04      	subs	r3, #4
 8001c24:	0112      	lsls	r2, r2, #4
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	440b      	add	r3, r1
 8001c2a:	761a      	strb	r2, [r3, #24]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f1c3 0307 	rsb	r3, r3, #7
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	bf28      	it	cs
 8001c5e:	2304      	movcs	r3, #4
 8001c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3304      	adds	r3, #4
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d902      	bls.n	8001c70 <NVIC_EncodePriority+0x30>
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3b03      	subs	r3, #3
 8001c6e:	e000      	b.n	8001c72 <NVIC_EncodePriority+0x32>
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	f04f 32ff 	mov.w	r2, #4294967295
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	401a      	ands	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43d9      	mvns	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	4313      	orrs	r3, r2
         );
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb8:	d301      	bcc.n	8001cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00f      	b.n	8001cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <SysTick_Config+0x40>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f7ff ff8e 	bl	8001bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <SysTick_Config+0x40>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <SysTick_Config+0x40>)
 8001cd8:	2207      	movs	r2, #7
 8001cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	e000e010 	.word	0xe000e010

08001cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff47 	bl	8001b88 <__NVIC_SetPriorityGrouping>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d14:	f7ff ff5c 	bl	8001bd0 <__NVIC_GetPriorityGrouping>
 8001d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f7ff ff8e 	bl	8001c40 <NVIC_EncodePriority>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff5d 	bl	8001bec <__NVIC_SetPriority>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffb0 	bl	8001ca8 <SysTick_Config>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e16b      	b.n	8002048 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	f040 815a 	bne.w	8002042 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d005      	beq.n	8001da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d130      	bne.n	8001e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 0201 	and.w	r2, r3, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d017      	beq.n	8001e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d123      	bne.n	8001e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80b4 	beq.w	8002042 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b60      	ldr	r3, [pc, #384]	; (8002060 <HAL_GPIO_Init+0x30c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a5f      	ldr	r2, [pc, #380]	; (8002060 <HAL_GPIO_Init+0x30c>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b5d      	ldr	r3, [pc, #372]	; (8002060 <HAL_GPIO_Init+0x30c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef6:	4a5b      	ldr	r2, [pc, #364]	; (8002064 <HAL_GPIO_Init+0x310>)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a52      	ldr	r2, [pc, #328]	; (8002068 <HAL_GPIO_Init+0x314>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02b      	beq.n	8001f7a <HAL_GPIO_Init+0x226>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a51      	ldr	r2, [pc, #324]	; (800206c <HAL_GPIO_Init+0x318>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d025      	beq.n	8001f76 <HAL_GPIO_Init+0x222>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a50      	ldr	r2, [pc, #320]	; (8002070 <HAL_GPIO_Init+0x31c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01f      	beq.n	8001f72 <HAL_GPIO_Init+0x21e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4f      	ldr	r2, [pc, #316]	; (8002074 <HAL_GPIO_Init+0x320>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d019      	beq.n	8001f6e <HAL_GPIO_Init+0x21a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4e      	ldr	r2, [pc, #312]	; (8002078 <HAL_GPIO_Init+0x324>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <HAL_GPIO_Init+0x216>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4d      	ldr	r2, [pc, #308]	; (800207c <HAL_GPIO_Init+0x328>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00d      	beq.n	8001f66 <HAL_GPIO_Init+0x212>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a4c      	ldr	r2, [pc, #304]	; (8002080 <HAL_GPIO_Init+0x32c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <HAL_GPIO_Init+0x20e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a4b      	ldr	r2, [pc, #300]	; (8002084 <HAL_GPIO_Init+0x330>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_GPIO_Init+0x20a>
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	e00e      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f5e:	2308      	movs	r3, #8
 8001f60:	e00c      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f62:	2306      	movs	r3, #6
 8001f64:	e00a      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f66:	2305      	movs	r3, #5
 8001f68:	e008      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e004      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e002      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_GPIO_Init+0x228>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	f002 0203 	and.w	r2, r2, #3
 8001f82:	0092      	lsls	r2, r2, #2
 8001f84:	4093      	lsls	r3, r2
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f8c:	4935      	ldr	r1, [pc, #212]	; (8002064 <HAL_GPIO_Init+0x310>)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_GPIO_Init+0x334>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fbe:	4a32      	ldr	r2, [pc, #200]	; (8002088 <HAL_GPIO_Init+0x334>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc4:	4b30      	ldr	r3, [pc, #192]	; (8002088 <HAL_GPIO_Init+0x334>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe8:	4a27      	ldr	r2, [pc, #156]	; (8002088 <HAL_GPIO_Init+0x334>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <HAL_GPIO_Init+0x334>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002012:	4a1d      	ldr	r2, [pc, #116]	; (8002088 <HAL_GPIO_Init+0x334>)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_GPIO_Init+0x334>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800203c:	4a12      	ldr	r2, [pc, #72]	; (8002088 <HAL_GPIO_Init+0x334>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b0f      	cmp	r3, #15
 800204c:	f67f ae90 	bls.w	8001d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40013800 	.word	0x40013800
 8002068:	40020000 	.word	0x40020000
 800206c:	40020400 	.word	0x40020400
 8002070:	40020800 	.word	0x40020800
 8002074:	40020c00 	.word	0x40020c00
 8002078:	40021000 	.word	0x40021000
 800207c:	40021400 	.word	0x40021400
 8002080:	40021800 	.word	0x40021800
 8002084:	40021c00 	.word	0x40021c00
 8002088:	40013c00 	.word	0x40013c00

0800208c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e12b      	b.n	80022f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fb64 	bl	8001780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2224      	movs	r2, #36	; 0x24
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020f0:	f001 fbbc 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 80020f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a81      	ldr	r2, [pc, #516]	; (8002300 <HAL_I2C_Init+0x274>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d807      	bhi.n	8002110 <HAL_I2C_Init+0x84>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a80      	ldr	r2, [pc, #512]	; (8002304 <HAL_I2C_Init+0x278>)
 8002104:	4293      	cmp	r3, r2
 8002106:	bf94      	ite	ls
 8002108:	2301      	movls	r3, #1
 800210a:	2300      	movhi	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e006      	b.n	800211e <HAL_I2C_Init+0x92>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a7d      	ldr	r2, [pc, #500]	; (8002308 <HAL_I2C_Init+0x27c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	bf94      	ite	ls
 8002118:	2301      	movls	r3, #1
 800211a:	2300      	movhi	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0e7      	b.n	80022f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a78      	ldr	r2, [pc, #480]	; (800230c <HAL_I2C_Init+0x280>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0c9b      	lsrs	r3, r3, #18
 8002130:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a6a      	ldr	r2, [pc, #424]	; (8002300 <HAL_I2C_Init+0x274>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d802      	bhi.n	8002160 <HAL_I2C_Init+0xd4>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	3301      	adds	r3, #1
 800215e:	e009      	b.n	8002174 <HAL_I2C_Init+0xe8>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	4a69      	ldr	r2, [pc, #420]	; (8002310 <HAL_I2C_Init+0x284>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	3301      	adds	r3, #1
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	430b      	orrs	r3, r1
 800217a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002186:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	495c      	ldr	r1, [pc, #368]	; (8002300 <HAL_I2C_Init+0x274>)
 8002190:	428b      	cmp	r3, r1
 8002192:	d819      	bhi.n	80021c8 <HAL_I2C_Init+0x13c>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1e59      	subs	r1, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a2:	1c59      	adds	r1, r3, #1
 80021a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021a8:	400b      	ands	r3, r1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_I2C_Init+0x138>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1e59      	subs	r1, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c2:	e051      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 80021c4:	2304      	movs	r3, #4
 80021c6:	e04f      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d111      	bne.n	80021f4 <HAL_I2C_Init+0x168>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	440b      	add	r3, r1
 80021de:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e2:	3301      	adds	r3, #1
 80021e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	e012      	b.n	800221a <HAL_I2C_Init+0x18e>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1e58      	subs	r0, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	0099      	lsls	r1, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	fbb0 f3f3 	udiv	r3, r0, r3
 800220a:	3301      	adds	r3, #1
 800220c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Init+0x196>
 800221e:	2301      	movs	r3, #1
 8002220:	e022      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10e      	bne.n	8002248 <HAL_I2C_Init+0x1bc>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1e58      	subs	r0, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	440b      	add	r3, r1
 8002238:	fbb0 f3f3 	udiv	r3, r0, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002246:	e00f      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e58      	subs	r0, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	0099      	lsls	r1, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	fbb0 f3f3 	udiv	r3, r0, r3
 800225e:	3301      	adds	r3, #1
 8002260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	6809      	ldr	r1, [r1, #0]
 800226c:	4313      	orrs	r3, r2
 800226e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6911      	ldr	r1, [r2, #16]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68d2      	ldr	r2, [r2, #12]
 80022a2:	4311      	orrs	r1, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	000186a0 	.word	0x000186a0
 8002304:	001e847f 	.word	0x001e847f
 8002308:	003d08ff 	.word	0x003d08ff
 800230c:	431bde83 	.word	0x431bde83
 8002310:	10624dd3 	.word	0x10624dd3

08002314 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	4608      	mov	r0, r1
 800231e:	4611      	mov	r1, r2
 8002320:	461a      	mov	r2, r3
 8002322:	4603      	mov	r3, r0
 8002324:	817b      	strh	r3, [r7, #10]
 8002326:	460b      	mov	r3, r1
 8002328:	813b      	strh	r3, [r7, #8]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800232e:	f7ff fbfb 	bl	8001b28 <HAL_GetTick>
 8002332:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b20      	cmp	r3, #32
 800233e:	f040 80d9 	bne.w	80024f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2319      	movs	r3, #25
 8002348:	2201      	movs	r2, #1
 800234a:	496d      	ldr	r1, [pc, #436]	; (8002500 <HAL_I2C_Mem_Write+0x1ec>)
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fc7f 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002358:	2302      	movs	r3, #2
 800235a:	e0cc      	b.n	80024f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_I2C_Mem_Write+0x56>
 8002366:	2302      	movs	r3, #2
 8002368:	e0c5      	b.n	80024f6 <HAL_I2C_Mem_Write+0x1e2>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	d007      	beq.n	8002390 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800239e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2221      	movs	r2, #33	; 0x21
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a3a      	ldr	r2, [r7, #32]
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4a4d      	ldr	r2, [pc, #308]	; (8002504 <HAL_I2C_Mem_Write+0x1f0>)
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023d2:	88f8      	ldrh	r0, [r7, #6]
 80023d4:	893a      	ldrh	r2, [r7, #8]
 80023d6:	8979      	ldrh	r1, [r7, #10]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	4603      	mov	r3, r0
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fab6 	bl	8002954 <I2C_RequestMemoryWrite>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d052      	beq.n	8002494 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e081      	b.n	80024f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fd00 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00d      	beq.n	800241e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	2b04      	cmp	r3, #4
 8002408:	d107      	bne.n	800241a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002418:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e06b      	b.n	80024f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	781a      	ldrb	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b04      	cmp	r3, #4
 800245a:	d11b      	bne.n	8002494 <HAL_I2C_Mem_Write+0x180>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	2b00      	cmp	r3, #0
 8002462:	d017      	beq.n	8002494 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1aa      	bne.n	80023f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fcec 	bl	8002e7e <I2C_WaitOnBTFFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00d      	beq.n	80024c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d107      	bne.n	80024c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e016      	b.n	80024f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	00100002 	.word	0x00100002
 8002504:	ffff0000 	.word	0xffff0000

08002508 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08c      	sub	sp, #48	; 0x30
 800250c:	af02      	add	r7, sp, #8
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4603      	mov	r3, r0
 8002518:	817b      	strh	r3, [r7, #10]
 800251a:	460b      	mov	r3, r1
 800251c:	813b      	strh	r3, [r7, #8]
 800251e:	4613      	mov	r3, r2
 8002520:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002522:	f7ff fb01 	bl	8001b28 <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b20      	cmp	r3, #32
 8002532:	f040 8208 	bne.w	8002946 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	2319      	movs	r3, #25
 800253c:	2201      	movs	r2, #1
 800253e:	497b      	ldr	r1, [pc, #492]	; (800272c <HAL_I2C_Mem_Read+0x224>)
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 fb85 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800254c:	2302      	movs	r3, #2
 800254e:	e1fb      	b.n	8002948 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_I2C_Mem_Read+0x56>
 800255a:	2302      	movs	r3, #2
 800255c:	e1f4      	b.n	8002948 <HAL_I2C_Mem_Read+0x440>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b01      	cmp	r3, #1
 8002572:	d007      	beq.n	8002584 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002592:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2222      	movs	r2, #34	; 0x22
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2240      	movs	r2, #64	; 0x40
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a5b      	ldr	r2, [pc, #364]	; (8002730 <HAL_I2C_Mem_Read+0x228>)
 80025c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025c6:	88f8      	ldrh	r0, [r7, #6]
 80025c8:	893a      	ldrh	r2, [r7, #8]
 80025ca:	8979      	ldrh	r1, [r7, #10]
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	9301      	str	r3, [sp, #4]
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	4603      	mov	r3, r0
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fa52 	bl	8002a80 <I2C_RequestMemoryRead>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1b0      	b.n	8002948 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d113      	bne.n	8002616 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	623b      	str	r3, [r7, #32]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	623b      	str	r3, [r7, #32]
 8002602:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e184      	b.n	8002920 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261a:	2b01      	cmp	r3, #1
 800261c:	d11b      	bne.n	8002656 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	e164      	b.n	8002920 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	2b02      	cmp	r3, #2
 800265c:	d11b      	bne.n	8002696 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800266c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800267c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	e144      	b.n	8002920 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026ac:	e138      	b.n	8002920 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	f200 80f1 	bhi.w	800289a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d123      	bne.n	8002708 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fc1b 	bl	8002f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e139      	b.n	8002948 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002706:	e10b      	b.n	8002920 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270c:	2b02      	cmp	r3, #2
 800270e:	d14e      	bne.n	80027ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	2200      	movs	r2, #0
 8002718:	4906      	ldr	r1, [pc, #24]	; (8002734 <HAL_I2C_Mem_Read+0x22c>)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fa98 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e10e      	b.n	8002948 <HAL_I2C_Mem_Read+0x440>
 800272a:	bf00      	nop
 800272c:	00100002 	.word	0x00100002
 8002730:	ffff0000 	.word	0xffff0000
 8002734:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027ac:	e0b8      	b.n	8002920 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	2200      	movs	r2, #0
 80027b6:	4966      	ldr	r1, [pc, #408]	; (8002950 <HAL_I2C_Mem_Read+0x448>)
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fa49 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0bf      	b.n	8002948 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002810:	2200      	movs	r2, #0
 8002812:	494f      	ldr	r1, [pc, #316]	; (8002950 <HAL_I2C_Mem_Read+0x448>)
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fa1b 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e091      	b.n	8002948 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002898:	e042      	b.n	8002920 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800289a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fb2e 	bl	8002f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e04c      	b.n	8002948 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d118      	bne.n	8002920 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	f47f aec2 	bne.w	80026ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	e000      	b.n	8002948 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002946:	2302      	movs	r3, #2
  }
}
 8002948:	4618      	mov	r0, r3
 800294a:	3728      	adds	r7, #40	; 0x28
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	00010004 	.word	0x00010004

08002954 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	817b      	strh	r3, [r7, #10]
 8002966:	460b      	mov	r3, r1
 8002968:	813b      	strh	r3, [r7, #8]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800297c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	2200      	movs	r2, #0
 8002986:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f960 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a4:	d103      	bne.n	80029ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e05f      	b.n	8002a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029b2:	897b      	ldrh	r3, [r7, #10]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	6a3a      	ldr	r2, [r7, #32]
 80029c6:	492d      	ldr	r1, [pc, #180]	; (8002a7c <I2C_RequestMemoryWrite+0x128>)
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f998 	bl	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e04c      	b.n	8002a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	6a39      	ldr	r1, [r7, #32]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fa02 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d107      	bne.n	8002a16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e02b      	b.n	8002a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a20:	893b      	ldrh	r3, [r7, #8]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	611a      	str	r2, [r3, #16]
 8002a2a:	e021      	b.n	8002a70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a2c:	893b      	ldrh	r3, [r7, #8]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3c:	6a39      	ldr	r1, [r7, #32]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f9dc 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d107      	bne.n	8002a62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e005      	b.n	8002a72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a66:	893b      	ldrh	r3, [r7, #8]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	00010002 	.word	0x00010002

08002a80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	460b      	mov	r3, r1
 8002a94:	813b      	strh	r3, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aa8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ab8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f8c2 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae0:	d103      	bne.n	8002aea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0aa      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aee:	897b      	ldrh	r3, [r7, #10]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002afc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	6a3a      	ldr	r2, [r7, #32]
 8002b02:	4952      	ldr	r1, [pc, #328]	; (8002c4c <I2C_RequestMemoryRead+0x1cc>)
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f8fa 	bl	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e097      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2c:	6a39      	ldr	r1, [r7, #32]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f964 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d107      	bne.n	8002b52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e076      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5c:	893b      	ldrh	r3, [r7, #8]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	611a      	str	r2, [r3, #16]
 8002b66:	e021      	b.n	8002bac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b68:	893b      	ldrh	r3, [r7, #8]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b78:	6a39      	ldr	r1, [r7, #32]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f93e 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d107      	bne.n	8002b9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e050      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba2:	893b      	ldrh	r3, [r7, #8]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bae:	6a39      	ldr	r1, [r7, #32]
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f923 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d107      	bne.n	8002bd4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e035      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f82b 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0e:	d103      	bne.n	8002c18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e013      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c1c:	897b      	ldrh	r3, [r7, #10]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	6a3a      	ldr	r2, [r7, #32]
 8002c30:	4906      	ldr	r1, [pc, #24]	; (8002c4c <I2C_RequestMemoryRead+0x1cc>)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f863 	bl	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	00010002 	.word	0x00010002

08002c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c60:	e025      	b.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d021      	beq.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7fe ff5d 	bl	8001b28 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d116      	bne.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e023      	b.n	8002cf6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	0c1b      	lsrs	r3, r3, #16
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d10d      	bne.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bf0c      	ite	eq
 8002cca:	2301      	moveq	r3, #1
 8002ccc:	2300      	movne	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	e00c      	b.n	8002cee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf0c      	ite	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	2300      	movne	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d0b6      	beq.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d0c:	e051      	b.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1c:	d123      	bne.n	8002d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f043 0204 	orr.w	r2, r3, #4
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e046      	b.n	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d021      	beq.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6e:	f7fe fedb 	bl	8001b28 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d116      	bne.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e020      	b.n	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d10c      	bne.n	8002dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	e00b      	b.n	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d18d      	bne.n	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e08:	e02d      	b.n	8002e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f8ce 	bl	8002fac <I2C_IsAcknowledgeFailed>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e02d      	b.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d021      	beq.n	8002e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e22:	f7fe fe81 	bl	8001b28 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d302      	bcc.n	8002e38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d116      	bne.n	8002e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f043 0220 	orr.w	r2, r3, #32
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e007      	b.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e70:	2b80      	cmp	r3, #128	; 0x80
 8002e72:	d1ca      	bne.n	8002e0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e8a:	e02d      	b.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f88d 	bl	8002fac <I2C_IsAcknowledgeFailed>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e02d      	b.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d021      	beq.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea4:	f7fe fe40 	bl	8001b28 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d302      	bcc.n	8002eba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d116      	bne.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e007      	b.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d1ca      	bne.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f0c:	e042      	b.n	8002f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d119      	bne.n	8002f50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0210 	mvn.w	r2, #16
 8002f24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e029      	b.n	8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f50:	f7fe fdea 	bl	8001b28 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d302      	bcc.n	8002f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d116      	bne.n	8002f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f043 0220 	orr.w	r2, r3, #32
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e007      	b.n	8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d1b5      	bne.n	8002f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc2:	d11b      	bne.n	8002ffc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f043 0204 	orr.w	r2, r3, #4
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e267      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d075      	beq.n	8003116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800302a:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b04      	cmp	r3, #4
 8003034:	d00c      	beq.n	8003050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4b85      	ldr	r3, [pc, #532]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303e:	2b08      	cmp	r3, #8
 8003040:	d112      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b82      	ldr	r3, [pc, #520]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b7e      	ldr	r3, [pc, #504]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05b      	beq.n	8003114 <HAL_RCC_OscConfig+0x108>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d157      	bne.n	8003114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e242      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x74>
 8003072:	4b76      	ldr	r3, [pc, #472]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a75      	ldr	r2, [pc, #468]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b70      	ldr	r3, [pc, #448]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6f      	ldr	r2, [pc, #444]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b6d      	ldr	r3, [pc, #436]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6c      	ldr	r2, [pc, #432]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 80030a4:	4b69      	ldr	r3, [pc, #420]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a68      	ldr	r2, [pc, #416]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b66      	ldr	r3, [pc, #408]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a65      	ldr	r2, [pc, #404]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe fd30 	bl	8001b28 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fe fd2c 	bl	8001b28 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e207      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b5b      	ldr	r3, [pc, #364]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xc0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fe fd1c 	bl	8001b28 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fe fd18 	bl	8001b28 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	; 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1f3      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	4b51      	ldr	r3, [pc, #324]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0xe8>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d063      	beq.n	80031ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003122:	4b4a      	ldr	r3, [pc, #296]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003136:	2b08      	cmp	r3, #8
 8003138:	d11c      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b44      	ldr	r3, [pc, #272]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1c7      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4937      	ldr	r1, [pc, #220]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	e03a      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCC_OscConfig+0x244>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7fe fcd1 	bl	8001b28 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318a:	f7fe fccd 	bl	8001b28 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e1a8      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_OscConfig+0x240>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b28      	ldr	r3, [pc, #160]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4925      	ldr	r1, [pc, #148]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x244>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe fcb0 	bl	8001b28 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031cc:	f7fe fcac 	bl	8001b28 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e187      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d036      	beq.n	8003264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_RCC_OscConfig+0x248>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe fc90 	bl	8001b28 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320c:	f7fe fc8c 	bl	8001b28 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e167      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_OscConfig+0x240>)
 8003220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x200>
 800322a:	e01b      	b.n	8003264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_OscConfig+0x248>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7fe fc79 	bl	8001b28 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e00e      	b.n	8003258 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323a:	f7fe fc75 	bl	8001b28 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d907      	bls.n	8003258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e150      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
 800324c:	40023800 	.word	0x40023800
 8003250:	42470000 	.word	0x42470000
 8003254:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	4b88      	ldr	r3, [pc, #544]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800325a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ea      	bne.n	800323a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8097 	beq.w	80033a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003276:	4b81      	ldr	r3, [pc, #516]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	4b7d      	ldr	r3, [pc, #500]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a7c      	ldr	r2, [pc, #496]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b7a      	ldr	r3, [pc, #488]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b77      	ldr	r3, [pc, #476]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b74      	ldr	r3, [pc, #464]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a73      	ldr	r2, [pc, #460]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fe fc35 	bl	8001b28 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fe fc31 	bl	8001b28 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e10c      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <HAL_RCC_OscConfig+0x474>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x2ea>
 80032e8:	4b64      	ldr	r3, [pc, #400]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	4a63      	ldr	r2, [pc, #396]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70
 80032f4:	e01c      	b.n	8003330 <HAL_RCC_OscConfig+0x324>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x30c>
 80032fe:	4b5f      	ldr	r3, [pc, #380]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a5e      	ldr	r2, [pc, #376]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
 800330a:	4b5c      	ldr	r3, [pc, #368]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4a5b      	ldr	r2, [pc, #364]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6713      	str	r3, [r2, #112]	; 0x70
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0x324>
 8003318:	4b58      	ldr	r3, [pc, #352]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	4a57      	ldr	r2, [pc, #348]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6713      	str	r3, [r2, #112]	; 0x70
 8003324:	4b55      	ldr	r3, [pc, #340]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	4a54      	ldr	r2, [pc, #336]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800332a:	f023 0304 	bic.w	r3, r3, #4
 800332e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d015      	beq.n	8003364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe fbf6 	bl	8001b28 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fe fbf2 	bl	8001b28 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e0cb      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003356:	4b49      	ldr	r3, [pc, #292]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0ee      	beq.n	8003340 <HAL_RCC_OscConfig+0x334>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003364:	f7fe fbe0 	bl	8001b28 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fe fbdc 	bl	8001b28 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e0b5      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003382:	4b3e      	ldr	r3, [pc, #248]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ee      	bne.n	800336c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d105      	bne.n	80033a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003394:	4b39      	ldr	r3, [pc, #228]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	4a38      	ldr	r2, [pc, #224]	; (800347c <HAL_RCC_OscConfig+0x470>)
 800339a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a1 	beq.w	80034ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033aa:	4b34      	ldr	r3, [pc, #208]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d05c      	beq.n	8003470 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d141      	bne.n	8003442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe fbb0 	bl	8001b28 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe fbac 	bl	8001b28 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e087      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x470>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	3b01      	subs	r3, #1
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	061b      	lsls	r3, r3, #24
 800340e:	491b      	ldr	r1, [pc, #108]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341a:	f7fe fb85 	bl	8001b28 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003422:	f7fe fb81 	bl	8001b28 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e05c      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x416>
 8003440:	e054      	b.n	80034ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCC_OscConfig+0x478>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe fb6e 	bl	8001b28 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7fe fb6a 	bl	8001b28 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e045      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_RCC_OscConfig+0x470>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x444>
 800346e:	e03d      	b.n	80034ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e038      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
 800347c:	40023800 	.word	0x40023800
 8003480:	40007000 	.word	0x40007000
 8003484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_RCC_OscConfig+0x4ec>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d028      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d121      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d11a      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d111      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	3b01      	subs	r3, #1
 80034d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0cc      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b68      	ldr	r3, [pc, #416]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d90c      	bls.n	8003538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b65      	ldr	r3, [pc, #404]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0b8      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003550:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a58      	ldr	r2, [pc, #352]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800355a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003568:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a52      	ldr	r2, [pc, #328]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b50      	ldr	r3, [pc, #320]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	494d      	ldr	r1, [pc, #308]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d044      	beq.n	800361c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d119      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e07f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e067      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4934      	ldr	r1, [pc, #208]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ec:	f7fe fa9c 	bl	8001b28 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fe fa98 	bl	8001b28 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e04f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800361c:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d20c      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e032      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003650:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4916      	ldr	r1, [pc, #88]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	490e      	ldr	r1, [pc, #56]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003682:	f000 f821 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8003686:	4602      	mov	r2, r0
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	490a      	ldr	r1, [pc, #40]	; (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe f9fc 	bl	8001aa0 <HAL_InitTick>

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023c00 	.word	0x40023c00
 80036b8:	40023800 	.word	0x40023800
 80036bc:	08004780 	.word	0x08004780
 80036c0:	20000000 	.word	0x20000000
 80036c4:	20000004 	.word	0x20000004

080036c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036cc:	b090      	sub	sp, #64	; 0x40
 80036ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
 80036d4:	2300      	movs	r3, #0
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d8:	2300      	movs	r3, #0
 80036da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e0:	4b59      	ldr	r3, [pc, #356]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d00d      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x40>
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	f200 80a1 	bhi.w	8003834 <HAL_RCC_GetSysClockFreq+0x16c>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x34>
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_GetSysClockFreq+0x3a>
 80036fa:	e09b      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036fc:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_GetSysClockFreq+0x184>)
 80036fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003700:	e09b      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003702:	4b53      	ldr	r3, [pc, #332]	; (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003704:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003706:	e098      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003708:	4b4f      	ldr	r3, [pc, #316]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003712:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d028      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371e:	4b4a      	ldr	r3, [pc, #296]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	099b      	lsrs	r3, r3, #6
 8003724:	2200      	movs	r2, #0
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	627a      	str	r2, [r7, #36]	; 0x24
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003730:	2100      	movs	r1, #0
 8003732:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003734:	fb03 f201 	mul.w	r2, r3, r1
 8003738:	2300      	movs	r3, #0
 800373a:	fb00 f303 	mul.w	r3, r0, r3
 800373e:	4413      	add	r3, r2
 8003740:	4a43      	ldr	r2, [pc, #268]	; (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003742:	fba0 1202 	umull	r1, r2, r0, r2
 8003746:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003748:	460a      	mov	r2, r1
 800374a:	62ba      	str	r2, [r7, #40]	; 0x28
 800374c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374e:	4413      	add	r3, r2
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003754:	2200      	movs	r2, #0
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	61fa      	str	r2, [r7, #28]
 800375a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003762:	f7fd f99d 	bl	8000aa0 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4613      	mov	r3, r2
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376e:	e053      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003770:	4b35      	ldr	r3, [pc, #212]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	2200      	movs	r2, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	617a      	str	r2, [r7, #20]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003782:	f04f 0b00 	mov.w	fp, #0
 8003786:	4652      	mov	r2, sl
 8003788:	465b      	mov	r3, fp
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	0159      	lsls	r1, r3, #5
 8003794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003798:	0150      	lsls	r0, r2, #5
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	ebb2 080a 	subs.w	r8, r2, sl
 80037a2:	eb63 090b 	sbc.w	r9, r3, fp
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037ba:	ebb2 0408 	subs.w	r4, r2, r8
 80037be:	eb63 0509 	sbc.w	r5, r3, r9
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	00eb      	lsls	r3, r5, #3
 80037cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d0:	00e2      	lsls	r2, r4, #3
 80037d2:	4614      	mov	r4, r2
 80037d4:	461d      	mov	r5, r3
 80037d6:	eb14 030a 	adds.w	r3, r4, sl
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	eb45 030b 	adc.w	r3, r5, fp
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ee:	4629      	mov	r1, r5
 80037f0:	028b      	lsls	r3, r1, #10
 80037f2:	4621      	mov	r1, r4
 80037f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f8:	4621      	mov	r1, r4
 80037fa:	028a      	lsls	r2, r1, #10
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003802:	2200      	movs	r2, #0
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	60fa      	str	r2, [r7, #12]
 8003808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800380c:	f7fd f948 	bl	8000aa0 <__aeabi_uldivmod>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4613      	mov	r3, r2
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	3301      	adds	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003832:	e002      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetSysClockFreq+0x184>)
 8003836:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800383c:	4618      	mov	r0, r3
 800383e:	3740      	adds	r7, #64	; 0x40
 8003840:	46bd      	mov	sp, r7
 8003842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800
 800384c:	00f42400 	.word	0x00f42400
 8003850:	017d7840 	.word	0x017d7840

08003854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_RCC_GetHCLKFreq+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000000 	.word	0x20000000

0800386c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003870:	f7ff fff0 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0a9b      	lsrs	r3, r3, #10
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4903      	ldr	r1, [pc, #12]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	08004790 	.word	0x08004790

08003894 <memset>:
 8003894:	4402      	add	r2, r0
 8003896:	4603      	mov	r3, r0
 8003898:	4293      	cmp	r3, r2
 800389a:	d100      	bne.n	800389e <memset+0xa>
 800389c:	4770      	bx	lr
 800389e:	f803 1b01 	strb.w	r1, [r3], #1
 80038a2:	e7f9      	b.n	8003898 <memset+0x4>

080038a4 <__errno>:
 80038a4:	4b01      	ldr	r3, [pc, #4]	; (80038ac <__errno+0x8>)
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000058 	.word	0x20000058

080038b0 <__libc_init_array>:
 80038b0:	b570      	push	{r4, r5, r6, lr}
 80038b2:	4d0d      	ldr	r5, [pc, #52]	; (80038e8 <__libc_init_array+0x38>)
 80038b4:	4c0d      	ldr	r4, [pc, #52]	; (80038ec <__libc_init_array+0x3c>)
 80038b6:	1b64      	subs	r4, r4, r5
 80038b8:	10a4      	asrs	r4, r4, #2
 80038ba:	2600      	movs	r6, #0
 80038bc:	42a6      	cmp	r6, r4
 80038be:	d109      	bne.n	80038d4 <__libc_init_array+0x24>
 80038c0:	4d0b      	ldr	r5, [pc, #44]	; (80038f0 <__libc_init_array+0x40>)
 80038c2:	4c0c      	ldr	r4, [pc, #48]	; (80038f4 <__libc_init_array+0x44>)
 80038c4:	f000 ff50 	bl	8004768 <_init>
 80038c8:	1b64      	subs	r4, r4, r5
 80038ca:	10a4      	asrs	r4, r4, #2
 80038cc:	2600      	movs	r6, #0
 80038ce:	42a6      	cmp	r6, r4
 80038d0:	d105      	bne.n	80038de <__libc_init_array+0x2e>
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d8:	4798      	blx	r3
 80038da:	3601      	adds	r6, #1
 80038dc:	e7ee      	b.n	80038bc <__libc_init_array+0xc>
 80038de:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e2:	4798      	blx	r3
 80038e4:	3601      	adds	r6, #1
 80038e6:	e7f2      	b.n	80038ce <__libc_init_array+0x1e>
 80038e8:	080047d0 	.word	0x080047d0
 80038ec:	080047d0 	.word	0x080047d0
 80038f0:	080047d0 	.word	0x080047d0
 80038f4:	080047d4 	.word	0x080047d4

080038f8 <pow>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	ed2d 8b02 	vpush	{d8}
 80038fe:	eeb0 8a40 	vmov.f32	s16, s0
 8003902:	eef0 8a60 	vmov.f32	s17, s1
 8003906:	ec55 4b11 	vmov	r4, r5, d1
 800390a:	f000 f871 	bl	80039f0 <__ieee754_pow>
 800390e:	4622      	mov	r2, r4
 8003910:	462b      	mov	r3, r5
 8003912:	4620      	mov	r0, r4
 8003914:	4629      	mov	r1, r5
 8003916:	ec57 6b10 	vmov	r6, r7, d0
 800391a:	f7fd f8ab 	bl	8000a74 <__aeabi_dcmpun>
 800391e:	2800      	cmp	r0, #0
 8003920:	d13b      	bne.n	800399a <pow+0xa2>
 8003922:	ec51 0b18 	vmov	r0, r1, d8
 8003926:	2200      	movs	r2, #0
 8003928:	2300      	movs	r3, #0
 800392a:	f7fd f871 	bl	8000a10 <__aeabi_dcmpeq>
 800392e:	b1b8      	cbz	r0, 8003960 <pow+0x68>
 8003930:	2200      	movs	r2, #0
 8003932:	2300      	movs	r3, #0
 8003934:	4620      	mov	r0, r4
 8003936:	4629      	mov	r1, r5
 8003938:	f7fd f86a 	bl	8000a10 <__aeabi_dcmpeq>
 800393c:	2800      	cmp	r0, #0
 800393e:	d146      	bne.n	80039ce <pow+0xd6>
 8003940:	ec45 4b10 	vmov	d0, r4, r5
 8003944:	f000 f848 	bl	80039d8 <finite>
 8003948:	b338      	cbz	r0, 800399a <pow+0xa2>
 800394a:	2200      	movs	r2, #0
 800394c:	2300      	movs	r3, #0
 800394e:	4620      	mov	r0, r4
 8003950:	4629      	mov	r1, r5
 8003952:	f7fd f867 	bl	8000a24 <__aeabi_dcmplt>
 8003956:	b300      	cbz	r0, 800399a <pow+0xa2>
 8003958:	f7ff ffa4 	bl	80038a4 <__errno>
 800395c:	2322      	movs	r3, #34	; 0x22
 800395e:	e01b      	b.n	8003998 <pow+0xa0>
 8003960:	ec47 6b10 	vmov	d0, r6, r7
 8003964:	f000 f838 	bl	80039d8 <finite>
 8003968:	b9e0      	cbnz	r0, 80039a4 <pow+0xac>
 800396a:	eeb0 0a48 	vmov.f32	s0, s16
 800396e:	eef0 0a68 	vmov.f32	s1, s17
 8003972:	f000 f831 	bl	80039d8 <finite>
 8003976:	b1a8      	cbz	r0, 80039a4 <pow+0xac>
 8003978:	ec45 4b10 	vmov	d0, r4, r5
 800397c:	f000 f82c 	bl	80039d8 <finite>
 8003980:	b180      	cbz	r0, 80039a4 <pow+0xac>
 8003982:	4632      	mov	r2, r6
 8003984:	463b      	mov	r3, r7
 8003986:	4630      	mov	r0, r6
 8003988:	4639      	mov	r1, r7
 800398a:	f7fd f873 	bl	8000a74 <__aeabi_dcmpun>
 800398e:	2800      	cmp	r0, #0
 8003990:	d0e2      	beq.n	8003958 <pow+0x60>
 8003992:	f7ff ff87 	bl	80038a4 <__errno>
 8003996:	2321      	movs	r3, #33	; 0x21
 8003998:	6003      	str	r3, [r0, #0]
 800399a:	ecbd 8b02 	vpop	{d8}
 800399e:	ec47 6b10 	vmov	d0, r6, r7
 80039a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a4:	2200      	movs	r2, #0
 80039a6:	2300      	movs	r3, #0
 80039a8:	4630      	mov	r0, r6
 80039aa:	4639      	mov	r1, r7
 80039ac:	f7fd f830 	bl	8000a10 <__aeabi_dcmpeq>
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d0f2      	beq.n	800399a <pow+0xa2>
 80039b4:	eeb0 0a48 	vmov.f32	s0, s16
 80039b8:	eef0 0a68 	vmov.f32	s1, s17
 80039bc:	f000 f80c 	bl	80039d8 <finite>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d0ea      	beq.n	800399a <pow+0xa2>
 80039c4:	ec45 4b10 	vmov	d0, r4, r5
 80039c8:	f000 f806 	bl	80039d8 <finite>
 80039cc:	e7c3      	b.n	8003956 <pow+0x5e>
 80039ce:	4f01      	ldr	r7, [pc, #4]	; (80039d4 <pow+0xdc>)
 80039d0:	2600      	movs	r6, #0
 80039d2:	e7e2      	b.n	800399a <pow+0xa2>
 80039d4:	3ff00000 	.word	0x3ff00000

080039d8 <finite>:
 80039d8:	b082      	sub	sp, #8
 80039da:	ed8d 0b00 	vstr	d0, [sp]
 80039de:	9801      	ldr	r0, [sp, #4]
 80039e0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80039e4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80039e8:	0fc0      	lsrs	r0, r0, #31
 80039ea:	b002      	add	sp, #8
 80039ec:	4770      	bx	lr
	...

080039f0 <__ieee754_pow>:
 80039f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039f4:	ed2d 8b06 	vpush	{d8-d10}
 80039f8:	b089      	sub	sp, #36	; 0x24
 80039fa:	ed8d 1b00 	vstr	d1, [sp]
 80039fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003a02:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003a06:	ea58 0102 	orrs.w	r1, r8, r2
 8003a0a:	ec57 6b10 	vmov	r6, r7, d0
 8003a0e:	d115      	bne.n	8003a3c <__ieee754_pow+0x4c>
 8003a10:	19b3      	adds	r3, r6, r6
 8003a12:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8003a16:	4152      	adcs	r2, r2
 8003a18:	4299      	cmp	r1, r3
 8003a1a:	4b89      	ldr	r3, [pc, #548]	; (8003c40 <__ieee754_pow+0x250>)
 8003a1c:	4193      	sbcs	r3, r2
 8003a1e:	f080 84d1 	bcs.w	80043c4 <__ieee754_pow+0x9d4>
 8003a22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a26:	4630      	mov	r0, r6
 8003a28:	4639      	mov	r1, r7
 8003a2a:	f7fc fbd3 	bl	80001d4 <__adddf3>
 8003a2e:	ec41 0b10 	vmov	d0, r0, r1
 8003a32:	b009      	add	sp, #36	; 0x24
 8003a34:	ecbd 8b06 	vpop	{d8-d10}
 8003a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a3c:	4b81      	ldr	r3, [pc, #516]	; (8003c44 <__ieee754_pow+0x254>)
 8003a3e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003a42:	429c      	cmp	r4, r3
 8003a44:	ee10 aa10 	vmov	sl, s0
 8003a48:	463d      	mov	r5, r7
 8003a4a:	dc06      	bgt.n	8003a5a <__ieee754_pow+0x6a>
 8003a4c:	d101      	bne.n	8003a52 <__ieee754_pow+0x62>
 8003a4e:	2e00      	cmp	r6, #0
 8003a50:	d1e7      	bne.n	8003a22 <__ieee754_pow+0x32>
 8003a52:	4598      	cmp	r8, r3
 8003a54:	dc01      	bgt.n	8003a5a <__ieee754_pow+0x6a>
 8003a56:	d10f      	bne.n	8003a78 <__ieee754_pow+0x88>
 8003a58:	b172      	cbz	r2, 8003a78 <__ieee754_pow+0x88>
 8003a5a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003a5e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003a62:	ea55 050a 	orrs.w	r5, r5, sl
 8003a66:	d1dc      	bne.n	8003a22 <__ieee754_pow+0x32>
 8003a68:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003a6c:	18db      	adds	r3, r3, r3
 8003a6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003a72:	4152      	adcs	r2, r2
 8003a74:	429d      	cmp	r5, r3
 8003a76:	e7d0      	b.n	8003a1a <__ieee754_pow+0x2a>
 8003a78:	2d00      	cmp	r5, #0
 8003a7a:	da3b      	bge.n	8003af4 <__ieee754_pow+0x104>
 8003a7c:	4b72      	ldr	r3, [pc, #456]	; (8003c48 <__ieee754_pow+0x258>)
 8003a7e:	4598      	cmp	r8, r3
 8003a80:	dc51      	bgt.n	8003b26 <__ieee754_pow+0x136>
 8003a82:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003a86:	4598      	cmp	r8, r3
 8003a88:	f340 84ab 	ble.w	80043e2 <__ieee754_pow+0x9f2>
 8003a8c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003a90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003a94:	2b14      	cmp	r3, #20
 8003a96:	dd0f      	ble.n	8003ab8 <__ieee754_pow+0xc8>
 8003a98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003a9c:	fa22 f103 	lsr.w	r1, r2, r3
 8003aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	f040 849c 	bne.w	80043e2 <__ieee754_pow+0x9f2>
 8003aaa:	f001 0101 	and.w	r1, r1, #1
 8003aae:	f1c1 0302 	rsb	r3, r1, #2
 8003ab2:	9304      	str	r3, [sp, #16]
 8003ab4:	b182      	cbz	r2, 8003ad8 <__ieee754_pow+0xe8>
 8003ab6:	e05f      	b.n	8003b78 <__ieee754_pow+0x188>
 8003ab8:	2a00      	cmp	r2, #0
 8003aba:	d15b      	bne.n	8003b74 <__ieee754_pow+0x184>
 8003abc:	f1c3 0314 	rsb	r3, r3, #20
 8003ac0:	fa48 f103 	asr.w	r1, r8, r3
 8003ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac8:	4543      	cmp	r3, r8
 8003aca:	f040 8487 	bne.w	80043dc <__ieee754_pow+0x9ec>
 8003ace:	f001 0101 	and.w	r1, r1, #1
 8003ad2:	f1c1 0302 	rsb	r3, r1, #2
 8003ad6:	9304      	str	r3, [sp, #16]
 8003ad8:	4b5c      	ldr	r3, [pc, #368]	; (8003c4c <__ieee754_pow+0x25c>)
 8003ada:	4598      	cmp	r8, r3
 8003adc:	d132      	bne.n	8003b44 <__ieee754_pow+0x154>
 8003ade:	f1b9 0f00 	cmp.w	r9, #0
 8003ae2:	f280 8477 	bge.w	80043d4 <__ieee754_pow+0x9e4>
 8003ae6:	4959      	ldr	r1, [pc, #356]	; (8003c4c <__ieee754_pow+0x25c>)
 8003ae8:	4632      	mov	r2, r6
 8003aea:	463b      	mov	r3, r7
 8003aec:	2000      	movs	r0, #0
 8003aee:	f7fc fe51 	bl	8000794 <__aeabi_ddiv>
 8003af2:	e79c      	b.n	8003a2e <__ieee754_pow+0x3e>
 8003af4:	2300      	movs	r3, #0
 8003af6:	9304      	str	r3, [sp, #16]
 8003af8:	2a00      	cmp	r2, #0
 8003afa:	d13d      	bne.n	8003b78 <__ieee754_pow+0x188>
 8003afc:	4b51      	ldr	r3, [pc, #324]	; (8003c44 <__ieee754_pow+0x254>)
 8003afe:	4598      	cmp	r8, r3
 8003b00:	d1ea      	bne.n	8003ad8 <__ieee754_pow+0xe8>
 8003b02:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003b06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003b0a:	ea53 030a 	orrs.w	r3, r3, sl
 8003b0e:	f000 8459 	beq.w	80043c4 <__ieee754_pow+0x9d4>
 8003b12:	4b4f      	ldr	r3, [pc, #316]	; (8003c50 <__ieee754_pow+0x260>)
 8003b14:	429c      	cmp	r4, r3
 8003b16:	dd08      	ble.n	8003b2a <__ieee754_pow+0x13a>
 8003b18:	f1b9 0f00 	cmp.w	r9, #0
 8003b1c:	f2c0 8456 	blt.w	80043cc <__ieee754_pow+0x9dc>
 8003b20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b24:	e783      	b.n	8003a2e <__ieee754_pow+0x3e>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e7e5      	b.n	8003af6 <__ieee754_pow+0x106>
 8003b2a:	f1b9 0f00 	cmp.w	r9, #0
 8003b2e:	f04f 0000 	mov.w	r0, #0
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	f6bf af7a 	bge.w	8003a2e <__ieee754_pow+0x3e>
 8003b3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003b3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003b42:	e774      	b.n	8003a2e <__ieee754_pow+0x3e>
 8003b44:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003b48:	d106      	bne.n	8003b58 <__ieee754_pow+0x168>
 8003b4a:	4632      	mov	r2, r6
 8003b4c:	463b      	mov	r3, r7
 8003b4e:	4630      	mov	r0, r6
 8003b50:	4639      	mov	r1, r7
 8003b52:	f7fc fcf5 	bl	8000540 <__aeabi_dmul>
 8003b56:	e76a      	b.n	8003a2e <__ieee754_pow+0x3e>
 8003b58:	4b3e      	ldr	r3, [pc, #248]	; (8003c54 <__ieee754_pow+0x264>)
 8003b5a:	4599      	cmp	r9, r3
 8003b5c:	d10c      	bne.n	8003b78 <__ieee754_pow+0x188>
 8003b5e:	2d00      	cmp	r5, #0
 8003b60:	db0a      	blt.n	8003b78 <__ieee754_pow+0x188>
 8003b62:	ec47 6b10 	vmov	d0, r6, r7
 8003b66:	b009      	add	sp, #36	; 0x24
 8003b68:	ecbd 8b06 	vpop	{d8-d10}
 8003b6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b70:	f000 bd20 	b.w	80045b4 <__ieee754_sqrt>
 8003b74:	2300      	movs	r3, #0
 8003b76:	9304      	str	r3, [sp, #16]
 8003b78:	ec47 6b10 	vmov	d0, r6, r7
 8003b7c:	f000 fc62 	bl	8004444 <fabs>
 8003b80:	ec51 0b10 	vmov	r0, r1, d0
 8003b84:	f1ba 0f00 	cmp.w	sl, #0
 8003b88:	d129      	bne.n	8003bde <__ieee754_pow+0x1ee>
 8003b8a:	b124      	cbz	r4, 8003b96 <__ieee754_pow+0x1a6>
 8003b8c:	4b2f      	ldr	r3, [pc, #188]	; (8003c4c <__ieee754_pow+0x25c>)
 8003b8e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d123      	bne.n	8003bde <__ieee754_pow+0x1ee>
 8003b96:	f1b9 0f00 	cmp.w	r9, #0
 8003b9a:	da05      	bge.n	8003ba8 <__ieee754_pow+0x1b8>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	492a      	ldr	r1, [pc, #168]	; (8003c4c <__ieee754_pow+0x25c>)
 8003ba4:	f7fc fdf6 	bl	8000794 <__aeabi_ddiv>
 8003ba8:	2d00      	cmp	r5, #0
 8003baa:	f6bf af40 	bge.w	8003a2e <__ieee754_pow+0x3e>
 8003bae:	9b04      	ldr	r3, [sp, #16]
 8003bb0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003bb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003bb8:	431c      	orrs	r4, r3
 8003bba:	d108      	bne.n	8003bce <__ieee754_pow+0x1de>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f7fc fb04 	bl	80001d0 <__aeabi_dsub>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	e78f      	b.n	8003aee <__ieee754_pow+0xfe>
 8003bce:	9b04      	ldr	r3, [sp, #16]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	f47f af2c 	bne.w	8003a2e <__ieee754_pow+0x3e>
 8003bd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003bda:	4619      	mov	r1, r3
 8003bdc:	e727      	b.n	8003a2e <__ieee754_pow+0x3e>
 8003bde:	0feb      	lsrs	r3, r5, #31
 8003be0:	3b01      	subs	r3, #1
 8003be2:	9306      	str	r3, [sp, #24]
 8003be4:	9a06      	ldr	r2, [sp, #24]
 8003be6:	9b04      	ldr	r3, [sp, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	d102      	bne.n	8003bf2 <__ieee754_pow+0x202>
 8003bec:	4632      	mov	r2, r6
 8003bee:	463b      	mov	r3, r7
 8003bf0:	e7e6      	b.n	8003bc0 <__ieee754_pow+0x1d0>
 8003bf2:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <__ieee754_pow+0x268>)
 8003bf4:	4598      	cmp	r8, r3
 8003bf6:	f340 80fb 	ble.w	8003df0 <__ieee754_pow+0x400>
 8003bfa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003bfe:	4598      	cmp	r8, r3
 8003c00:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <__ieee754_pow+0x260>)
 8003c02:	dd0c      	ble.n	8003c1e <__ieee754_pow+0x22e>
 8003c04:	429c      	cmp	r4, r3
 8003c06:	dc0f      	bgt.n	8003c28 <__ieee754_pow+0x238>
 8003c08:	f1b9 0f00 	cmp.w	r9, #0
 8003c0c:	da0f      	bge.n	8003c2e <__ieee754_pow+0x23e>
 8003c0e:	2000      	movs	r0, #0
 8003c10:	b009      	add	sp, #36	; 0x24
 8003c12:	ecbd 8b06 	vpop	{d8-d10}
 8003c16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c1a:	f000 bcc2 	b.w	80045a2 <__math_oflow>
 8003c1e:	429c      	cmp	r4, r3
 8003c20:	dbf2      	blt.n	8003c08 <__ieee754_pow+0x218>
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <__ieee754_pow+0x25c>)
 8003c24:	429c      	cmp	r4, r3
 8003c26:	dd19      	ble.n	8003c5c <__ieee754_pow+0x26c>
 8003c28:	f1b9 0f00 	cmp.w	r9, #0
 8003c2c:	dcef      	bgt.n	8003c0e <__ieee754_pow+0x21e>
 8003c2e:	2000      	movs	r0, #0
 8003c30:	b009      	add	sp, #36	; 0x24
 8003c32:	ecbd 8b06 	vpop	{d8-d10}
 8003c36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3a:	f000 bca9 	b.w	8004590 <__math_uflow>
 8003c3e:	bf00      	nop
 8003c40:	fff00000 	.word	0xfff00000
 8003c44:	7ff00000 	.word	0x7ff00000
 8003c48:	433fffff 	.word	0x433fffff
 8003c4c:	3ff00000 	.word	0x3ff00000
 8003c50:	3fefffff 	.word	0x3fefffff
 8003c54:	3fe00000 	.word	0x3fe00000
 8003c58:	41e00000 	.word	0x41e00000
 8003c5c:	4b60      	ldr	r3, [pc, #384]	; (8003de0 <__ieee754_pow+0x3f0>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f7fc fab6 	bl	80001d0 <__aeabi_dsub>
 8003c64:	a354      	add	r3, pc, #336	; (adr r3, 8003db8 <__ieee754_pow+0x3c8>)
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	460d      	mov	r5, r1
 8003c6e:	f7fc fc67 	bl	8000540 <__aeabi_dmul>
 8003c72:	a353      	add	r3, pc, #332	; (adr r3, 8003dc0 <__ieee754_pow+0x3d0>)
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	4606      	mov	r6, r0
 8003c7a:	460f      	mov	r7, r1
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	4629      	mov	r1, r5
 8003c80:	f7fc fc5e 	bl	8000540 <__aeabi_dmul>
 8003c84:	4b57      	ldr	r3, [pc, #348]	; (8003de4 <__ieee754_pow+0x3f4>)
 8003c86:	4682      	mov	sl, r0
 8003c88:	468b      	mov	fp, r1
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	4629      	mov	r1, r5
 8003c90:	f7fc fc56 	bl	8000540 <__aeabi_dmul>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	a14b      	add	r1, pc, #300	; (adr r1, 8003dc8 <__ieee754_pow+0x3d8>)
 8003c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c9e:	f7fc fa97 	bl	80001d0 <__aeabi_dsub>
 8003ca2:	4622      	mov	r2, r4
 8003ca4:	462b      	mov	r3, r5
 8003ca6:	f7fc fc4b 	bl	8000540 <__aeabi_dmul>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	2000      	movs	r0, #0
 8003cb0:	494d      	ldr	r1, [pc, #308]	; (8003de8 <__ieee754_pow+0x3f8>)
 8003cb2:	f7fc fa8d 	bl	80001d0 <__aeabi_dsub>
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	4680      	mov	r8, r0
 8003cba:	4689      	mov	r9, r1
 8003cbc:	462b      	mov	r3, r5
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	f7fc fc3d 	bl	8000540 <__aeabi_dmul>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4640      	mov	r0, r8
 8003ccc:	4649      	mov	r1, r9
 8003cce:	f7fc fc37 	bl	8000540 <__aeabi_dmul>
 8003cd2:	a33f      	add	r3, pc, #252	; (adr r3, 8003dd0 <__ieee754_pow+0x3e0>)
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f7fc fc32 	bl	8000540 <__aeabi_dmul>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4650      	mov	r0, sl
 8003ce2:	4659      	mov	r1, fp
 8003ce4:	f7fc fa74 	bl	80001d0 <__aeabi_dsub>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4680      	mov	r8, r0
 8003cee:	4689      	mov	r9, r1
 8003cf0:	4630      	mov	r0, r6
 8003cf2:	4639      	mov	r1, r7
 8003cf4:	f7fc fa6e 	bl	80001d4 <__adddf3>
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	4632      	mov	r2, r6
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	4604      	mov	r4, r0
 8003d00:	460d      	mov	r5, r1
 8003d02:	f7fc fa65 	bl	80001d0 <__aeabi_dsub>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	f7fc fa5f 	bl	80001d0 <__aeabi_dsub>
 8003d12:	9b04      	ldr	r3, [sp, #16]
 8003d14:	9a06      	ldr	r2, [sp, #24]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	4682      	mov	sl, r0
 8003d1c:	468b      	mov	fp, r1
 8003d1e:	f040 81e7 	bne.w	80040f0 <__ieee754_pow+0x700>
 8003d22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8003dd8 <__ieee754_pow+0x3e8>
 8003d26:	eeb0 8a47 	vmov.f32	s16, s14
 8003d2a:	eef0 8a67 	vmov.f32	s17, s15
 8003d2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003d32:	2600      	movs	r6, #0
 8003d34:	4632      	mov	r2, r6
 8003d36:	463b      	mov	r3, r7
 8003d38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d3c:	f7fc fa48 	bl	80001d0 <__aeabi_dsub>
 8003d40:	4622      	mov	r2, r4
 8003d42:	462b      	mov	r3, r5
 8003d44:	f7fc fbfc 	bl	8000540 <__aeabi_dmul>
 8003d48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d4c:	4680      	mov	r8, r0
 8003d4e:	4689      	mov	r9, r1
 8003d50:	4650      	mov	r0, sl
 8003d52:	4659      	mov	r1, fp
 8003d54:	f7fc fbf4 	bl	8000540 <__aeabi_dmul>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4640      	mov	r0, r8
 8003d5e:	4649      	mov	r1, r9
 8003d60:	f7fc fa38 	bl	80001d4 <__adddf3>
 8003d64:	4632      	mov	r2, r6
 8003d66:	463b      	mov	r3, r7
 8003d68:	4680      	mov	r8, r0
 8003d6a:	4689      	mov	r9, r1
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	4629      	mov	r1, r5
 8003d70:	f7fc fbe6 	bl	8000540 <__aeabi_dmul>
 8003d74:	460b      	mov	r3, r1
 8003d76:	4604      	mov	r4, r0
 8003d78:	460d      	mov	r5, r1
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	4640      	mov	r0, r8
 8003d80:	f7fc fa28 	bl	80001d4 <__adddf3>
 8003d84:	4b19      	ldr	r3, [pc, #100]	; (8003dec <__ieee754_pow+0x3fc>)
 8003d86:	4299      	cmp	r1, r3
 8003d88:	ec45 4b19 	vmov	d9, r4, r5
 8003d8c:	4606      	mov	r6, r0
 8003d8e:	460f      	mov	r7, r1
 8003d90:	468b      	mov	fp, r1
 8003d92:	f340 82f0 	ble.w	8004376 <__ieee754_pow+0x986>
 8003d96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003d9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003d9e:	4303      	orrs	r3, r0
 8003da0:	f000 81e4 	beq.w	800416c <__ieee754_pow+0x77c>
 8003da4:	ec51 0b18 	vmov	r0, r1, d8
 8003da8:	2200      	movs	r2, #0
 8003daa:	2300      	movs	r3, #0
 8003dac:	f7fc fe3a 	bl	8000a24 <__aeabi_dcmplt>
 8003db0:	3800      	subs	r0, #0
 8003db2:	bf18      	it	ne
 8003db4:	2001      	movne	r0, #1
 8003db6:	e72b      	b.n	8003c10 <__ieee754_pow+0x220>
 8003db8:	60000000 	.word	0x60000000
 8003dbc:	3ff71547 	.word	0x3ff71547
 8003dc0:	f85ddf44 	.word	0xf85ddf44
 8003dc4:	3e54ae0b 	.word	0x3e54ae0b
 8003dc8:	55555555 	.word	0x55555555
 8003dcc:	3fd55555 	.word	0x3fd55555
 8003dd0:	652b82fe 	.word	0x652b82fe
 8003dd4:	3ff71547 	.word	0x3ff71547
 8003dd8:	00000000 	.word	0x00000000
 8003ddc:	bff00000 	.word	0xbff00000
 8003de0:	3ff00000 	.word	0x3ff00000
 8003de4:	3fd00000 	.word	0x3fd00000
 8003de8:	3fe00000 	.word	0x3fe00000
 8003dec:	408fffff 	.word	0x408fffff
 8003df0:	4bd5      	ldr	r3, [pc, #852]	; (8004148 <__ieee754_pow+0x758>)
 8003df2:	402b      	ands	r3, r5
 8003df4:	2200      	movs	r2, #0
 8003df6:	b92b      	cbnz	r3, 8003e04 <__ieee754_pow+0x414>
 8003df8:	4bd4      	ldr	r3, [pc, #848]	; (800414c <__ieee754_pow+0x75c>)
 8003dfa:	f7fc fba1 	bl	8000540 <__aeabi_dmul>
 8003dfe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003e02:	460c      	mov	r4, r1
 8003e04:	1523      	asrs	r3, r4, #20
 8003e06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003e0a:	4413      	add	r3, r2
 8003e0c:	9305      	str	r3, [sp, #20]
 8003e0e:	4bd0      	ldr	r3, [pc, #832]	; (8004150 <__ieee754_pow+0x760>)
 8003e10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003e14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003e1e:	dd08      	ble.n	8003e32 <__ieee754_pow+0x442>
 8003e20:	4bcc      	ldr	r3, [pc, #816]	; (8004154 <__ieee754_pow+0x764>)
 8003e22:	429c      	cmp	r4, r3
 8003e24:	f340 8162 	ble.w	80040ec <__ieee754_pow+0x6fc>
 8003e28:	9b05      	ldr	r3, [sp, #20]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	9305      	str	r3, [sp, #20]
 8003e2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003e32:	2400      	movs	r4, #0
 8003e34:	00e3      	lsls	r3, r4, #3
 8003e36:	9307      	str	r3, [sp, #28]
 8003e38:	4bc7      	ldr	r3, [pc, #796]	; (8004158 <__ieee754_pow+0x768>)
 8003e3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003e3e:	ed93 7b00 	vldr	d7, [r3]
 8003e42:	4629      	mov	r1, r5
 8003e44:	ec53 2b17 	vmov	r2, r3, d7
 8003e48:	eeb0 9a47 	vmov.f32	s18, s14
 8003e4c:	eef0 9a67 	vmov.f32	s19, s15
 8003e50:	4682      	mov	sl, r0
 8003e52:	f7fc f9bd 	bl	80001d0 <__aeabi_dsub>
 8003e56:	4652      	mov	r2, sl
 8003e58:	4606      	mov	r6, r0
 8003e5a:	460f      	mov	r7, r1
 8003e5c:	462b      	mov	r3, r5
 8003e5e:	ec51 0b19 	vmov	r0, r1, d9
 8003e62:	f7fc f9b7 	bl	80001d4 <__adddf3>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	49bb      	ldr	r1, [pc, #748]	; (800415c <__ieee754_pow+0x76c>)
 8003e6e:	f7fc fc91 	bl	8000794 <__aeabi_ddiv>
 8003e72:	ec41 0b1a 	vmov	d10, r0, r1
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	4639      	mov	r1, r7
 8003e7e:	f7fc fb5f 	bl	8000540 <__aeabi_dmul>
 8003e82:	2300      	movs	r3, #0
 8003e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e88:	9302      	str	r3, [sp, #8]
 8003e8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003e8e:	46ab      	mov	fp, r5
 8003e90:	106d      	asrs	r5, r5, #1
 8003e92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003e96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003e9a:	ec41 0b18 	vmov	d8, r0, r1
 8003e9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	4640      	mov	r0, r8
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	461d      	mov	r5, r3
 8003eac:	f7fc fb48 	bl	8000540 <__aeabi_dmul>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	4639      	mov	r1, r7
 8003eb8:	f7fc f98a 	bl	80001d0 <__aeabi_dsub>
 8003ebc:	ec53 2b19 	vmov	r2, r3, d9
 8003ec0:	4606      	mov	r6, r0
 8003ec2:	460f      	mov	r7, r1
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	f7fc f982 	bl	80001d0 <__aeabi_dsub>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4650      	mov	r0, sl
 8003ed2:	4659      	mov	r1, fp
 8003ed4:	f7fc f97c 	bl	80001d0 <__aeabi_dsub>
 8003ed8:	4642      	mov	r2, r8
 8003eda:	464b      	mov	r3, r9
 8003edc:	f7fc fb30 	bl	8000540 <__aeabi_dmul>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	4639      	mov	r1, r7
 8003ee8:	f7fc f972 	bl	80001d0 <__aeabi_dsub>
 8003eec:	ec53 2b1a 	vmov	r2, r3, d10
 8003ef0:	f7fc fb26 	bl	8000540 <__aeabi_dmul>
 8003ef4:	ec53 2b18 	vmov	r2, r3, d8
 8003ef8:	ec41 0b19 	vmov	d9, r0, r1
 8003efc:	ec51 0b18 	vmov	r0, r1, d8
 8003f00:	f7fc fb1e 	bl	8000540 <__aeabi_dmul>
 8003f04:	a37c      	add	r3, pc, #496	; (adr r3, 80040f8 <__ieee754_pow+0x708>)
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	460d      	mov	r5, r1
 8003f0e:	f7fc fb17 	bl	8000540 <__aeabi_dmul>
 8003f12:	a37b      	add	r3, pc, #492	; (adr r3, 8004100 <__ieee754_pow+0x710>)
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f7fc f95c 	bl	80001d4 <__adddf3>
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	462b      	mov	r3, r5
 8003f20:	f7fc fb0e 	bl	8000540 <__aeabi_dmul>
 8003f24:	a378      	add	r3, pc, #480	; (adr r3, 8004108 <__ieee754_pow+0x718>)
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f7fc f953 	bl	80001d4 <__adddf3>
 8003f2e:	4622      	mov	r2, r4
 8003f30:	462b      	mov	r3, r5
 8003f32:	f7fc fb05 	bl	8000540 <__aeabi_dmul>
 8003f36:	a376      	add	r3, pc, #472	; (adr r3, 8004110 <__ieee754_pow+0x720>)
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f7fc f94a 	bl	80001d4 <__adddf3>
 8003f40:	4622      	mov	r2, r4
 8003f42:	462b      	mov	r3, r5
 8003f44:	f7fc fafc 	bl	8000540 <__aeabi_dmul>
 8003f48:	a373      	add	r3, pc, #460	; (adr r3, 8004118 <__ieee754_pow+0x728>)
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	f7fc f941 	bl	80001d4 <__adddf3>
 8003f52:	4622      	mov	r2, r4
 8003f54:	462b      	mov	r3, r5
 8003f56:	f7fc faf3 	bl	8000540 <__aeabi_dmul>
 8003f5a:	a371      	add	r3, pc, #452	; (adr r3, 8004120 <__ieee754_pow+0x730>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc f938 	bl	80001d4 <__adddf3>
 8003f64:	4622      	mov	r2, r4
 8003f66:	4606      	mov	r6, r0
 8003f68:	460f      	mov	r7, r1
 8003f6a:	462b      	mov	r3, r5
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	4629      	mov	r1, r5
 8003f70:	f7fc fae6 	bl	8000540 <__aeabi_dmul>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4630      	mov	r0, r6
 8003f7a:	4639      	mov	r1, r7
 8003f7c:	f7fc fae0 	bl	8000540 <__aeabi_dmul>
 8003f80:	4642      	mov	r2, r8
 8003f82:	4604      	mov	r4, r0
 8003f84:	460d      	mov	r5, r1
 8003f86:	464b      	mov	r3, r9
 8003f88:	ec51 0b18 	vmov	r0, r1, d8
 8003f8c:	f7fc f922 	bl	80001d4 <__adddf3>
 8003f90:	ec53 2b19 	vmov	r2, r3, d9
 8003f94:	f7fc fad4 	bl	8000540 <__aeabi_dmul>
 8003f98:	4622      	mov	r2, r4
 8003f9a:	462b      	mov	r3, r5
 8003f9c:	f7fc f91a 	bl	80001d4 <__adddf3>
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	4682      	mov	sl, r0
 8003fa4:	468b      	mov	fp, r1
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	4640      	mov	r0, r8
 8003faa:	4649      	mov	r1, r9
 8003fac:	f7fc fac8 	bl	8000540 <__aeabi_dmul>
 8003fb0:	4b6b      	ldr	r3, [pc, #428]	; (8004160 <__ieee754_pow+0x770>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	460f      	mov	r7, r1
 8003fb8:	f7fc f90c 	bl	80001d4 <__adddf3>
 8003fbc:	4652      	mov	r2, sl
 8003fbe:	465b      	mov	r3, fp
 8003fc0:	f7fc f908 	bl	80001d4 <__adddf3>
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	460d      	mov	r5, r1
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4640      	mov	r0, r8
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	f7fc fab5 	bl	8000540 <__aeabi_dmul>
 8003fd6:	4b62      	ldr	r3, [pc, #392]	; (8004160 <__ieee754_pow+0x770>)
 8003fd8:	4680      	mov	r8, r0
 8003fda:	4689      	mov	r9, r1
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4620      	mov	r0, r4
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	f7fc f8f5 	bl	80001d0 <__aeabi_dsub>
 8003fe6:	4632      	mov	r2, r6
 8003fe8:	463b      	mov	r3, r7
 8003fea:	f7fc f8f1 	bl	80001d0 <__aeabi_dsub>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4650      	mov	r0, sl
 8003ff4:	4659      	mov	r1, fp
 8003ff6:	f7fc f8eb 	bl	80001d0 <__aeabi_dsub>
 8003ffa:	ec53 2b18 	vmov	r2, r3, d8
 8003ffe:	f7fc fa9f 	bl	8000540 <__aeabi_dmul>
 8004002:	4622      	mov	r2, r4
 8004004:	4606      	mov	r6, r0
 8004006:	460f      	mov	r7, r1
 8004008:	462b      	mov	r3, r5
 800400a:	ec51 0b19 	vmov	r0, r1, d9
 800400e:	f7fc fa97 	bl	8000540 <__aeabi_dmul>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4630      	mov	r0, r6
 8004018:	4639      	mov	r1, r7
 800401a:	f7fc f8db 	bl	80001d4 <__adddf3>
 800401e:	4606      	mov	r6, r0
 8004020:	460f      	mov	r7, r1
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4640      	mov	r0, r8
 8004028:	4649      	mov	r1, r9
 800402a:	f7fc f8d3 	bl	80001d4 <__adddf3>
 800402e:	a33e      	add	r3, pc, #248	; (adr r3, 8004128 <__ieee754_pow+0x738>)
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	2000      	movs	r0, #0
 8004036:	4604      	mov	r4, r0
 8004038:	460d      	mov	r5, r1
 800403a:	f7fc fa81 	bl	8000540 <__aeabi_dmul>
 800403e:	4642      	mov	r2, r8
 8004040:	ec41 0b18 	vmov	d8, r0, r1
 8004044:	464b      	mov	r3, r9
 8004046:	4620      	mov	r0, r4
 8004048:	4629      	mov	r1, r5
 800404a:	f7fc f8c1 	bl	80001d0 <__aeabi_dsub>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4630      	mov	r0, r6
 8004054:	4639      	mov	r1, r7
 8004056:	f7fc f8bb 	bl	80001d0 <__aeabi_dsub>
 800405a:	a335      	add	r3, pc, #212	; (adr r3, 8004130 <__ieee754_pow+0x740>)
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f7fc fa6e 	bl	8000540 <__aeabi_dmul>
 8004064:	a334      	add	r3, pc, #208	; (adr r3, 8004138 <__ieee754_pow+0x748>)
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	4606      	mov	r6, r0
 800406c:	460f      	mov	r7, r1
 800406e:	4620      	mov	r0, r4
 8004070:	4629      	mov	r1, r5
 8004072:	f7fc fa65 	bl	8000540 <__aeabi_dmul>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	4630      	mov	r0, r6
 800407c:	4639      	mov	r1, r7
 800407e:	f7fc f8a9 	bl	80001d4 <__adddf3>
 8004082:	9a07      	ldr	r2, [sp, #28]
 8004084:	4b37      	ldr	r3, [pc, #220]	; (8004164 <__ieee754_pow+0x774>)
 8004086:	4413      	add	r3, r2
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f7fc f8a2 	bl	80001d4 <__adddf3>
 8004090:	4682      	mov	sl, r0
 8004092:	9805      	ldr	r0, [sp, #20]
 8004094:	468b      	mov	fp, r1
 8004096:	f7fc f9e9 	bl	800046c <__aeabi_i2d>
 800409a:	9a07      	ldr	r2, [sp, #28]
 800409c:	4b32      	ldr	r3, [pc, #200]	; (8004168 <__ieee754_pow+0x778>)
 800409e:	4413      	add	r3, r2
 80040a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80040a4:	4606      	mov	r6, r0
 80040a6:	460f      	mov	r7, r1
 80040a8:	4652      	mov	r2, sl
 80040aa:	465b      	mov	r3, fp
 80040ac:	ec51 0b18 	vmov	r0, r1, d8
 80040b0:	f7fc f890 	bl	80001d4 <__adddf3>
 80040b4:	4642      	mov	r2, r8
 80040b6:	464b      	mov	r3, r9
 80040b8:	f7fc f88c 	bl	80001d4 <__adddf3>
 80040bc:	4632      	mov	r2, r6
 80040be:	463b      	mov	r3, r7
 80040c0:	f7fc f888 	bl	80001d4 <__adddf3>
 80040c4:	2000      	movs	r0, #0
 80040c6:	4632      	mov	r2, r6
 80040c8:	463b      	mov	r3, r7
 80040ca:	4604      	mov	r4, r0
 80040cc:	460d      	mov	r5, r1
 80040ce:	f7fc f87f 	bl	80001d0 <__aeabi_dsub>
 80040d2:	4642      	mov	r2, r8
 80040d4:	464b      	mov	r3, r9
 80040d6:	f7fc f87b 	bl	80001d0 <__aeabi_dsub>
 80040da:	ec53 2b18 	vmov	r2, r3, d8
 80040de:	f7fc f877 	bl	80001d0 <__aeabi_dsub>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4650      	mov	r0, sl
 80040e8:	4659      	mov	r1, fp
 80040ea:	e610      	b.n	8003d0e <__ieee754_pow+0x31e>
 80040ec:	2401      	movs	r4, #1
 80040ee:	e6a1      	b.n	8003e34 <__ieee754_pow+0x444>
 80040f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004140 <__ieee754_pow+0x750>
 80040f4:	e617      	b.n	8003d26 <__ieee754_pow+0x336>
 80040f6:	bf00      	nop
 80040f8:	4a454eef 	.word	0x4a454eef
 80040fc:	3fca7e28 	.word	0x3fca7e28
 8004100:	93c9db65 	.word	0x93c9db65
 8004104:	3fcd864a 	.word	0x3fcd864a
 8004108:	a91d4101 	.word	0xa91d4101
 800410c:	3fd17460 	.word	0x3fd17460
 8004110:	518f264d 	.word	0x518f264d
 8004114:	3fd55555 	.word	0x3fd55555
 8004118:	db6fabff 	.word	0xdb6fabff
 800411c:	3fdb6db6 	.word	0x3fdb6db6
 8004120:	33333303 	.word	0x33333303
 8004124:	3fe33333 	.word	0x3fe33333
 8004128:	e0000000 	.word	0xe0000000
 800412c:	3feec709 	.word	0x3feec709
 8004130:	dc3a03fd 	.word	0xdc3a03fd
 8004134:	3feec709 	.word	0x3feec709
 8004138:	145b01f5 	.word	0x145b01f5
 800413c:	be3e2fe0 	.word	0xbe3e2fe0
 8004140:	00000000 	.word	0x00000000
 8004144:	3ff00000 	.word	0x3ff00000
 8004148:	7ff00000 	.word	0x7ff00000
 800414c:	43400000 	.word	0x43400000
 8004150:	0003988e 	.word	0x0003988e
 8004154:	000bb679 	.word	0x000bb679
 8004158:	08004798 	.word	0x08004798
 800415c:	3ff00000 	.word	0x3ff00000
 8004160:	40080000 	.word	0x40080000
 8004164:	080047b8 	.word	0x080047b8
 8004168:	080047a8 	.word	0x080047a8
 800416c:	a3b3      	add	r3, pc, #716	; (adr r3, 800443c <__ieee754_pow+0xa4c>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	4640      	mov	r0, r8
 8004174:	4649      	mov	r1, r9
 8004176:	f7fc f82d 	bl	80001d4 <__adddf3>
 800417a:	4622      	mov	r2, r4
 800417c:	ec41 0b1a 	vmov	d10, r0, r1
 8004180:	462b      	mov	r3, r5
 8004182:	4630      	mov	r0, r6
 8004184:	4639      	mov	r1, r7
 8004186:	f7fc f823 	bl	80001d0 <__aeabi_dsub>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	ec51 0b1a 	vmov	r0, r1, d10
 8004192:	f7fc fc65 	bl	8000a60 <__aeabi_dcmpgt>
 8004196:	2800      	cmp	r0, #0
 8004198:	f47f ae04 	bne.w	8003da4 <__ieee754_pow+0x3b4>
 800419c:	4aa2      	ldr	r2, [pc, #648]	; (8004428 <__ieee754_pow+0xa38>)
 800419e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80041a2:	4293      	cmp	r3, r2
 80041a4:	f340 8107 	ble.w	80043b6 <__ieee754_pow+0x9c6>
 80041a8:	151b      	asrs	r3, r3, #20
 80041aa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80041ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80041b2:	fa4a fa03 	asr.w	sl, sl, r3
 80041b6:	44da      	add	sl, fp
 80041b8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80041bc:	489b      	ldr	r0, [pc, #620]	; (800442c <__ieee754_pow+0xa3c>)
 80041be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80041c2:	4108      	asrs	r0, r1
 80041c4:	ea00 030a 	and.w	r3, r0, sl
 80041c8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80041cc:	f1c1 0114 	rsb	r1, r1, #20
 80041d0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80041d4:	fa4a fa01 	asr.w	sl, sl, r1
 80041d8:	f1bb 0f00 	cmp.w	fp, #0
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	4620      	mov	r0, r4
 80041e2:	4629      	mov	r1, r5
 80041e4:	bfb8      	it	lt
 80041e6:	f1ca 0a00 	rsblt	sl, sl, #0
 80041ea:	f7fb fff1 	bl	80001d0 <__aeabi_dsub>
 80041ee:	ec41 0b19 	vmov	d9, r0, r1
 80041f2:	4642      	mov	r2, r8
 80041f4:	464b      	mov	r3, r9
 80041f6:	ec51 0b19 	vmov	r0, r1, d9
 80041fa:	f7fb ffeb 	bl	80001d4 <__adddf3>
 80041fe:	a37a      	add	r3, pc, #488	; (adr r3, 80043e8 <__ieee754_pow+0x9f8>)
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	2000      	movs	r0, #0
 8004206:	4604      	mov	r4, r0
 8004208:	460d      	mov	r5, r1
 800420a:	f7fc f999 	bl	8000540 <__aeabi_dmul>
 800420e:	ec53 2b19 	vmov	r2, r3, d9
 8004212:	4606      	mov	r6, r0
 8004214:	460f      	mov	r7, r1
 8004216:	4620      	mov	r0, r4
 8004218:	4629      	mov	r1, r5
 800421a:	f7fb ffd9 	bl	80001d0 <__aeabi_dsub>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4640      	mov	r0, r8
 8004224:	4649      	mov	r1, r9
 8004226:	f7fb ffd3 	bl	80001d0 <__aeabi_dsub>
 800422a:	a371      	add	r3, pc, #452	; (adr r3, 80043f0 <__ieee754_pow+0xa00>)
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f7fc f986 	bl	8000540 <__aeabi_dmul>
 8004234:	a370      	add	r3, pc, #448	; (adr r3, 80043f8 <__ieee754_pow+0xa08>)
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	4680      	mov	r8, r0
 800423c:	4689      	mov	r9, r1
 800423e:	4620      	mov	r0, r4
 8004240:	4629      	mov	r1, r5
 8004242:	f7fc f97d 	bl	8000540 <__aeabi_dmul>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4640      	mov	r0, r8
 800424c:	4649      	mov	r1, r9
 800424e:	f7fb ffc1 	bl	80001d4 <__adddf3>
 8004252:	4604      	mov	r4, r0
 8004254:	460d      	mov	r5, r1
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4630      	mov	r0, r6
 800425c:	4639      	mov	r1, r7
 800425e:	f7fb ffb9 	bl	80001d4 <__adddf3>
 8004262:	4632      	mov	r2, r6
 8004264:	463b      	mov	r3, r7
 8004266:	4680      	mov	r8, r0
 8004268:	4689      	mov	r9, r1
 800426a:	f7fb ffb1 	bl	80001d0 <__aeabi_dsub>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4620      	mov	r0, r4
 8004274:	4629      	mov	r1, r5
 8004276:	f7fb ffab 	bl	80001d0 <__aeabi_dsub>
 800427a:	4642      	mov	r2, r8
 800427c:	4606      	mov	r6, r0
 800427e:	460f      	mov	r7, r1
 8004280:	464b      	mov	r3, r9
 8004282:	4640      	mov	r0, r8
 8004284:	4649      	mov	r1, r9
 8004286:	f7fc f95b 	bl	8000540 <__aeabi_dmul>
 800428a:	a35d      	add	r3, pc, #372	; (adr r3, 8004400 <__ieee754_pow+0xa10>)
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	4604      	mov	r4, r0
 8004292:	460d      	mov	r5, r1
 8004294:	f7fc f954 	bl	8000540 <__aeabi_dmul>
 8004298:	a35b      	add	r3, pc, #364	; (adr r3, 8004408 <__ieee754_pow+0xa18>)
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	f7fb ff97 	bl	80001d0 <__aeabi_dsub>
 80042a2:	4622      	mov	r2, r4
 80042a4:	462b      	mov	r3, r5
 80042a6:	f7fc f94b 	bl	8000540 <__aeabi_dmul>
 80042aa:	a359      	add	r3, pc, #356	; (adr r3, 8004410 <__ieee754_pow+0xa20>)
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	f7fb ff90 	bl	80001d4 <__adddf3>
 80042b4:	4622      	mov	r2, r4
 80042b6:	462b      	mov	r3, r5
 80042b8:	f7fc f942 	bl	8000540 <__aeabi_dmul>
 80042bc:	a356      	add	r3, pc, #344	; (adr r3, 8004418 <__ieee754_pow+0xa28>)
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f7fb ff85 	bl	80001d0 <__aeabi_dsub>
 80042c6:	4622      	mov	r2, r4
 80042c8:	462b      	mov	r3, r5
 80042ca:	f7fc f939 	bl	8000540 <__aeabi_dmul>
 80042ce:	a354      	add	r3, pc, #336	; (adr r3, 8004420 <__ieee754_pow+0xa30>)
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	f7fb ff7e 	bl	80001d4 <__adddf3>
 80042d8:	4622      	mov	r2, r4
 80042da:	462b      	mov	r3, r5
 80042dc:	f7fc f930 	bl	8000540 <__aeabi_dmul>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4640      	mov	r0, r8
 80042e6:	4649      	mov	r1, r9
 80042e8:	f7fb ff72 	bl	80001d0 <__aeabi_dsub>
 80042ec:	4604      	mov	r4, r0
 80042ee:	460d      	mov	r5, r1
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4640      	mov	r0, r8
 80042f6:	4649      	mov	r1, r9
 80042f8:	f7fc f922 	bl	8000540 <__aeabi_dmul>
 80042fc:	2200      	movs	r2, #0
 80042fe:	ec41 0b19 	vmov	d9, r0, r1
 8004302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004306:	4620      	mov	r0, r4
 8004308:	4629      	mov	r1, r5
 800430a:	f7fb ff61 	bl	80001d0 <__aeabi_dsub>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	ec51 0b19 	vmov	r0, r1, d9
 8004316:	f7fc fa3d 	bl	8000794 <__aeabi_ddiv>
 800431a:	4632      	mov	r2, r6
 800431c:	4604      	mov	r4, r0
 800431e:	460d      	mov	r5, r1
 8004320:	463b      	mov	r3, r7
 8004322:	4640      	mov	r0, r8
 8004324:	4649      	mov	r1, r9
 8004326:	f7fc f90b 	bl	8000540 <__aeabi_dmul>
 800432a:	4632      	mov	r2, r6
 800432c:	463b      	mov	r3, r7
 800432e:	f7fb ff51 	bl	80001d4 <__adddf3>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4620      	mov	r0, r4
 8004338:	4629      	mov	r1, r5
 800433a:	f7fb ff49 	bl	80001d0 <__aeabi_dsub>
 800433e:	4642      	mov	r2, r8
 8004340:	464b      	mov	r3, r9
 8004342:	f7fb ff45 	bl	80001d0 <__aeabi_dsub>
 8004346:	460b      	mov	r3, r1
 8004348:	4602      	mov	r2, r0
 800434a:	4939      	ldr	r1, [pc, #228]	; (8004430 <__ieee754_pow+0xa40>)
 800434c:	2000      	movs	r0, #0
 800434e:	f7fb ff3f 	bl	80001d0 <__aeabi_dsub>
 8004352:	ec41 0b10 	vmov	d0, r0, r1
 8004356:	ee10 3a90 	vmov	r3, s1
 800435a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800435e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004362:	da2b      	bge.n	80043bc <__ieee754_pow+0x9cc>
 8004364:	4650      	mov	r0, sl
 8004366:	f000 f877 	bl	8004458 <scalbn>
 800436a:	ec51 0b10 	vmov	r0, r1, d0
 800436e:	ec53 2b18 	vmov	r2, r3, d8
 8004372:	f7ff bbee 	b.w	8003b52 <__ieee754_pow+0x162>
 8004376:	4b2f      	ldr	r3, [pc, #188]	; (8004434 <__ieee754_pow+0xa44>)
 8004378:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800437c:	429e      	cmp	r6, r3
 800437e:	f77f af0d 	ble.w	800419c <__ieee754_pow+0x7ac>
 8004382:	4b2d      	ldr	r3, [pc, #180]	; (8004438 <__ieee754_pow+0xa48>)
 8004384:	440b      	add	r3, r1
 8004386:	4303      	orrs	r3, r0
 8004388:	d009      	beq.n	800439e <__ieee754_pow+0x9ae>
 800438a:	ec51 0b18 	vmov	r0, r1, d8
 800438e:	2200      	movs	r2, #0
 8004390:	2300      	movs	r3, #0
 8004392:	f7fc fb47 	bl	8000a24 <__aeabi_dcmplt>
 8004396:	3800      	subs	r0, #0
 8004398:	bf18      	it	ne
 800439a:	2001      	movne	r0, #1
 800439c:	e448      	b.n	8003c30 <__ieee754_pow+0x240>
 800439e:	4622      	mov	r2, r4
 80043a0:	462b      	mov	r3, r5
 80043a2:	f7fb ff15 	bl	80001d0 <__aeabi_dsub>
 80043a6:	4642      	mov	r2, r8
 80043a8:	464b      	mov	r3, r9
 80043aa:	f7fc fb4f 	bl	8000a4c <__aeabi_dcmpge>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	f43f aef4 	beq.w	800419c <__ieee754_pow+0x7ac>
 80043b4:	e7e9      	b.n	800438a <__ieee754_pow+0x99a>
 80043b6:	f04f 0a00 	mov.w	sl, #0
 80043ba:	e71a      	b.n	80041f2 <__ieee754_pow+0x802>
 80043bc:	ec51 0b10 	vmov	r0, r1, d0
 80043c0:	4619      	mov	r1, r3
 80043c2:	e7d4      	b.n	800436e <__ieee754_pow+0x97e>
 80043c4:	491a      	ldr	r1, [pc, #104]	; (8004430 <__ieee754_pow+0xa40>)
 80043c6:	2000      	movs	r0, #0
 80043c8:	f7ff bb31 	b.w	8003a2e <__ieee754_pow+0x3e>
 80043cc:	2000      	movs	r0, #0
 80043ce:	2100      	movs	r1, #0
 80043d0:	f7ff bb2d 	b.w	8003a2e <__ieee754_pow+0x3e>
 80043d4:	4630      	mov	r0, r6
 80043d6:	4639      	mov	r1, r7
 80043d8:	f7ff bb29 	b.w	8003a2e <__ieee754_pow+0x3e>
 80043dc:	9204      	str	r2, [sp, #16]
 80043de:	f7ff bb7b 	b.w	8003ad8 <__ieee754_pow+0xe8>
 80043e2:	2300      	movs	r3, #0
 80043e4:	f7ff bb65 	b.w	8003ab2 <__ieee754_pow+0xc2>
 80043e8:	00000000 	.word	0x00000000
 80043ec:	3fe62e43 	.word	0x3fe62e43
 80043f0:	fefa39ef 	.word	0xfefa39ef
 80043f4:	3fe62e42 	.word	0x3fe62e42
 80043f8:	0ca86c39 	.word	0x0ca86c39
 80043fc:	be205c61 	.word	0xbe205c61
 8004400:	72bea4d0 	.word	0x72bea4d0
 8004404:	3e663769 	.word	0x3e663769
 8004408:	c5d26bf1 	.word	0xc5d26bf1
 800440c:	3ebbbd41 	.word	0x3ebbbd41
 8004410:	af25de2c 	.word	0xaf25de2c
 8004414:	3f11566a 	.word	0x3f11566a
 8004418:	16bebd93 	.word	0x16bebd93
 800441c:	3f66c16c 	.word	0x3f66c16c
 8004420:	5555553e 	.word	0x5555553e
 8004424:	3fc55555 	.word	0x3fc55555
 8004428:	3fe00000 	.word	0x3fe00000
 800442c:	fff00000 	.word	0xfff00000
 8004430:	3ff00000 	.word	0x3ff00000
 8004434:	4090cbff 	.word	0x4090cbff
 8004438:	3f6f3400 	.word	0x3f6f3400
 800443c:	652b82fe 	.word	0x652b82fe
 8004440:	3c971547 	.word	0x3c971547

08004444 <fabs>:
 8004444:	ec51 0b10 	vmov	r0, r1, d0
 8004448:	ee10 2a10 	vmov	r2, s0
 800444c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004450:	ec43 2b10 	vmov	d0, r2, r3
 8004454:	4770      	bx	lr
	...

08004458 <scalbn>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	ec55 4b10 	vmov	r4, r5, d0
 800445e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004462:	4606      	mov	r6, r0
 8004464:	462b      	mov	r3, r5
 8004466:	b999      	cbnz	r1, 8004490 <scalbn+0x38>
 8004468:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800446c:	4323      	orrs	r3, r4
 800446e:	d03f      	beq.n	80044f0 <scalbn+0x98>
 8004470:	4b35      	ldr	r3, [pc, #212]	; (8004548 <scalbn+0xf0>)
 8004472:	4629      	mov	r1, r5
 8004474:	ee10 0a10 	vmov	r0, s0
 8004478:	2200      	movs	r2, #0
 800447a:	f7fc f861 	bl	8000540 <__aeabi_dmul>
 800447e:	4b33      	ldr	r3, [pc, #204]	; (800454c <scalbn+0xf4>)
 8004480:	429e      	cmp	r6, r3
 8004482:	4604      	mov	r4, r0
 8004484:	460d      	mov	r5, r1
 8004486:	da10      	bge.n	80044aa <scalbn+0x52>
 8004488:	a327      	add	r3, pc, #156	; (adr r3, 8004528 <scalbn+0xd0>)
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	e01f      	b.n	80044d0 <scalbn+0x78>
 8004490:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004494:	4291      	cmp	r1, r2
 8004496:	d10c      	bne.n	80044b2 <scalbn+0x5a>
 8004498:	ee10 2a10 	vmov	r2, s0
 800449c:	4620      	mov	r0, r4
 800449e:	4629      	mov	r1, r5
 80044a0:	f7fb fe98 	bl	80001d4 <__adddf3>
 80044a4:	4604      	mov	r4, r0
 80044a6:	460d      	mov	r5, r1
 80044a8:	e022      	b.n	80044f0 <scalbn+0x98>
 80044aa:	460b      	mov	r3, r1
 80044ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80044b0:	3936      	subs	r1, #54	; 0x36
 80044b2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80044b6:	4296      	cmp	r6, r2
 80044b8:	dd0d      	ble.n	80044d6 <scalbn+0x7e>
 80044ba:	2d00      	cmp	r5, #0
 80044bc:	a11c      	add	r1, pc, #112	; (adr r1, 8004530 <scalbn+0xd8>)
 80044be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044c2:	da02      	bge.n	80044ca <scalbn+0x72>
 80044c4:	a11c      	add	r1, pc, #112	; (adr r1, 8004538 <scalbn+0xe0>)
 80044c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044ca:	a319      	add	r3, pc, #100	; (adr r3, 8004530 <scalbn+0xd8>)
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f7fc f836 	bl	8000540 <__aeabi_dmul>
 80044d4:	e7e6      	b.n	80044a4 <scalbn+0x4c>
 80044d6:	1872      	adds	r2, r6, r1
 80044d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80044dc:	428a      	cmp	r2, r1
 80044de:	dcec      	bgt.n	80044ba <scalbn+0x62>
 80044e0:	2a00      	cmp	r2, #0
 80044e2:	dd08      	ble.n	80044f6 <scalbn+0x9e>
 80044e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80044e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80044f0:	ec45 4b10 	vmov	d0, r4, r5
 80044f4:	bd70      	pop	{r4, r5, r6, pc}
 80044f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80044fa:	da08      	bge.n	800450e <scalbn+0xb6>
 80044fc:	2d00      	cmp	r5, #0
 80044fe:	a10a      	add	r1, pc, #40	; (adr r1, 8004528 <scalbn+0xd0>)
 8004500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004504:	dac0      	bge.n	8004488 <scalbn+0x30>
 8004506:	a10e      	add	r1, pc, #56	; (adr r1, 8004540 <scalbn+0xe8>)
 8004508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800450c:	e7bc      	b.n	8004488 <scalbn+0x30>
 800450e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004512:	3236      	adds	r2, #54	; 0x36
 8004514:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004518:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800451c:	4620      	mov	r0, r4
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <scalbn+0xf8>)
 8004520:	2200      	movs	r2, #0
 8004522:	e7d5      	b.n	80044d0 <scalbn+0x78>
 8004524:	f3af 8000 	nop.w
 8004528:	c2f8f359 	.word	0xc2f8f359
 800452c:	01a56e1f 	.word	0x01a56e1f
 8004530:	8800759c 	.word	0x8800759c
 8004534:	7e37e43c 	.word	0x7e37e43c
 8004538:	8800759c 	.word	0x8800759c
 800453c:	fe37e43c 	.word	0xfe37e43c
 8004540:	c2f8f359 	.word	0xc2f8f359
 8004544:	81a56e1f 	.word	0x81a56e1f
 8004548:	43500000 	.word	0x43500000
 800454c:	ffff3cb0 	.word	0xffff3cb0
 8004550:	3c900000 	.word	0x3c900000

08004554 <with_errno>:
 8004554:	b570      	push	{r4, r5, r6, lr}
 8004556:	4604      	mov	r4, r0
 8004558:	460d      	mov	r5, r1
 800455a:	4616      	mov	r6, r2
 800455c:	f7ff f9a2 	bl	80038a4 <__errno>
 8004560:	4629      	mov	r1, r5
 8004562:	6006      	str	r6, [r0, #0]
 8004564:	4620      	mov	r0, r4
 8004566:	bd70      	pop	{r4, r5, r6, pc}

08004568 <xflow>:
 8004568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800456a:	4614      	mov	r4, r2
 800456c:	461d      	mov	r5, r3
 800456e:	b108      	cbz	r0, 8004574 <xflow+0xc>
 8004570:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004574:	e9cd 2300 	strd	r2, r3, [sp]
 8004578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800457c:	4620      	mov	r0, r4
 800457e:	4629      	mov	r1, r5
 8004580:	f7fb ffde 	bl	8000540 <__aeabi_dmul>
 8004584:	2222      	movs	r2, #34	; 0x22
 8004586:	b003      	add	sp, #12
 8004588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800458c:	f7ff bfe2 	b.w	8004554 <with_errno>

08004590 <__math_uflow>:
 8004590:	b508      	push	{r3, lr}
 8004592:	2200      	movs	r2, #0
 8004594:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004598:	f7ff ffe6 	bl	8004568 <xflow>
 800459c:	ec41 0b10 	vmov	d0, r0, r1
 80045a0:	bd08      	pop	{r3, pc}

080045a2 <__math_oflow>:
 80045a2:	b508      	push	{r3, lr}
 80045a4:	2200      	movs	r2, #0
 80045a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80045aa:	f7ff ffdd 	bl	8004568 <xflow>
 80045ae:	ec41 0b10 	vmov	d0, r0, r1
 80045b2:	bd08      	pop	{r3, pc}

080045b4 <__ieee754_sqrt>:
 80045b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b8:	ec55 4b10 	vmov	r4, r5, d0
 80045bc:	4e67      	ldr	r6, [pc, #412]	; (800475c <__ieee754_sqrt+0x1a8>)
 80045be:	43ae      	bics	r6, r5
 80045c0:	ee10 0a10 	vmov	r0, s0
 80045c4:	ee10 2a10 	vmov	r2, s0
 80045c8:	4629      	mov	r1, r5
 80045ca:	462b      	mov	r3, r5
 80045cc:	d10d      	bne.n	80045ea <__ieee754_sqrt+0x36>
 80045ce:	f7fb ffb7 	bl	8000540 <__aeabi_dmul>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4620      	mov	r0, r4
 80045d8:	4629      	mov	r1, r5
 80045da:	f7fb fdfb 	bl	80001d4 <__adddf3>
 80045de:	4604      	mov	r4, r0
 80045e0:	460d      	mov	r5, r1
 80045e2:	ec45 4b10 	vmov	d0, r4, r5
 80045e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ea:	2d00      	cmp	r5, #0
 80045ec:	dc0b      	bgt.n	8004606 <__ieee754_sqrt+0x52>
 80045ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80045f2:	4326      	orrs	r6, r4
 80045f4:	d0f5      	beq.n	80045e2 <__ieee754_sqrt+0x2e>
 80045f6:	b135      	cbz	r5, 8004606 <__ieee754_sqrt+0x52>
 80045f8:	f7fb fdea 	bl	80001d0 <__aeabi_dsub>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	f7fc f8c8 	bl	8000794 <__aeabi_ddiv>
 8004604:	e7eb      	b.n	80045de <__ieee754_sqrt+0x2a>
 8004606:	1509      	asrs	r1, r1, #20
 8004608:	f000 808d 	beq.w	8004726 <__ieee754_sqrt+0x172>
 800460c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004610:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8004614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004618:	07c9      	lsls	r1, r1, #31
 800461a:	bf5c      	itt	pl
 800461c:	005b      	lslpl	r3, r3, #1
 800461e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8004622:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004626:	bf58      	it	pl
 8004628:	0052      	lslpl	r2, r2, #1
 800462a:	2500      	movs	r5, #0
 800462c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004630:	1076      	asrs	r6, r6, #1
 8004632:	0052      	lsls	r2, r2, #1
 8004634:	f04f 0e16 	mov.w	lr, #22
 8004638:	46ac      	mov	ip, r5
 800463a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800463e:	eb0c 0001 	add.w	r0, ip, r1
 8004642:	4298      	cmp	r0, r3
 8004644:	bfde      	ittt	le
 8004646:	1a1b      	suble	r3, r3, r0
 8004648:	eb00 0c01 	addle.w	ip, r0, r1
 800464c:	186d      	addle	r5, r5, r1
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	f1be 0e01 	subs.w	lr, lr, #1
 8004654:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004658:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800465c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004660:	d1ed      	bne.n	800463e <__ieee754_sqrt+0x8a>
 8004662:	4674      	mov	r4, lr
 8004664:	2720      	movs	r7, #32
 8004666:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800466a:	4563      	cmp	r3, ip
 800466c:	eb01 000e 	add.w	r0, r1, lr
 8004670:	dc02      	bgt.n	8004678 <__ieee754_sqrt+0xc4>
 8004672:	d113      	bne.n	800469c <__ieee754_sqrt+0xe8>
 8004674:	4290      	cmp	r0, r2
 8004676:	d811      	bhi.n	800469c <__ieee754_sqrt+0xe8>
 8004678:	2800      	cmp	r0, #0
 800467a:	eb00 0e01 	add.w	lr, r0, r1
 800467e:	da57      	bge.n	8004730 <__ieee754_sqrt+0x17c>
 8004680:	f1be 0f00 	cmp.w	lr, #0
 8004684:	db54      	blt.n	8004730 <__ieee754_sqrt+0x17c>
 8004686:	f10c 0801 	add.w	r8, ip, #1
 800468a:	eba3 030c 	sub.w	r3, r3, ip
 800468e:	4290      	cmp	r0, r2
 8004690:	bf88      	it	hi
 8004692:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004696:	1a12      	subs	r2, r2, r0
 8004698:	440c      	add	r4, r1
 800469a:	46c4      	mov	ip, r8
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	3f01      	subs	r7, #1
 80046a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80046a4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80046a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80046ac:	d1dd      	bne.n	800466a <__ieee754_sqrt+0xb6>
 80046ae:	4313      	orrs	r3, r2
 80046b0:	d01b      	beq.n	80046ea <__ieee754_sqrt+0x136>
 80046b2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004760 <__ieee754_sqrt+0x1ac>
 80046b6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004764 <__ieee754_sqrt+0x1b0>
 80046ba:	e9da 0100 	ldrd	r0, r1, [sl]
 80046be:	e9db 2300 	ldrd	r2, r3, [fp]
 80046c2:	f7fb fd85 	bl	80001d0 <__aeabi_dsub>
 80046c6:	e9da 8900 	ldrd	r8, r9, [sl]
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4640      	mov	r0, r8
 80046d0:	4649      	mov	r1, r9
 80046d2:	f7fc f9b1 	bl	8000a38 <__aeabi_dcmple>
 80046d6:	b140      	cbz	r0, 80046ea <__ieee754_sqrt+0x136>
 80046d8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80046dc:	e9da 0100 	ldrd	r0, r1, [sl]
 80046e0:	e9db 2300 	ldrd	r2, r3, [fp]
 80046e4:	d126      	bne.n	8004734 <__ieee754_sqrt+0x180>
 80046e6:	3501      	adds	r5, #1
 80046e8:	463c      	mov	r4, r7
 80046ea:	106a      	asrs	r2, r5, #1
 80046ec:	0863      	lsrs	r3, r4, #1
 80046ee:	07e9      	lsls	r1, r5, #31
 80046f0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80046f4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80046f8:	bf48      	it	mi
 80046fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80046fe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8004702:	461c      	mov	r4, r3
 8004704:	e76d      	b.n	80045e2 <__ieee754_sqrt+0x2e>
 8004706:	0ad3      	lsrs	r3, r2, #11
 8004708:	3815      	subs	r0, #21
 800470a:	0552      	lsls	r2, r2, #21
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0fa      	beq.n	8004706 <__ieee754_sqrt+0x152>
 8004710:	02dc      	lsls	r4, r3, #11
 8004712:	d50a      	bpl.n	800472a <__ieee754_sqrt+0x176>
 8004714:	f1c1 0420 	rsb	r4, r1, #32
 8004718:	fa22 f404 	lsr.w	r4, r2, r4
 800471c:	1e4d      	subs	r5, r1, #1
 800471e:	408a      	lsls	r2, r1
 8004720:	4323      	orrs	r3, r4
 8004722:	1b41      	subs	r1, r0, r5
 8004724:	e772      	b.n	800460c <__ieee754_sqrt+0x58>
 8004726:	4608      	mov	r0, r1
 8004728:	e7f0      	b.n	800470c <__ieee754_sqrt+0x158>
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	3101      	adds	r1, #1
 800472e:	e7ef      	b.n	8004710 <__ieee754_sqrt+0x15c>
 8004730:	46e0      	mov	r8, ip
 8004732:	e7aa      	b.n	800468a <__ieee754_sqrt+0xd6>
 8004734:	f7fb fd4e 	bl	80001d4 <__adddf3>
 8004738:	e9da 8900 	ldrd	r8, r9, [sl]
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4640      	mov	r0, r8
 8004742:	4649      	mov	r1, r9
 8004744:	f7fc f96e 	bl	8000a24 <__aeabi_dcmplt>
 8004748:	b120      	cbz	r0, 8004754 <__ieee754_sqrt+0x1a0>
 800474a:	1ca0      	adds	r0, r4, #2
 800474c:	bf08      	it	eq
 800474e:	3501      	addeq	r5, #1
 8004750:	3402      	adds	r4, #2
 8004752:	e7ca      	b.n	80046ea <__ieee754_sqrt+0x136>
 8004754:	3401      	adds	r4, #1
 8004756:	f024 0401 	bic.w	r4, r4, #1
 800475a:	e7c6      	b.n	80046ea <__ieee754_sqrt+0x136>
 800475c:	7ff00000 	.word	0x7ff00000
 8004760:	20000060 	.word	0x20000060
 8004764:	20000068 	.word	0x20000068

08004768 <_init>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	bf00      	nop
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr

08004774 <_fini>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	bf00      	nop
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr
