
MPU6050_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002928  08002928  00012928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002940  08002940  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002940  08002940  00012940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002948  08002948  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000094  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007251  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000159f  00000000  00000000  000272d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000738  00000000  00000000  00028870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000577  00000000  00000000  00028fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fc20  00000000  00000000  0002951f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009fe4  00000000  00000000  0004913f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000befde  00000000  00000000  00053123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001c60  00000000  00000000  00112104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00113d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002910 	.word	0x08002910

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002910 	.word	0x08002910

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MPU6050_Init>:
 * @param Typedef structure that holds i2c handle, gyro and acclerometer data
 * @param Related I2C Handle
 * @retval Returns the number of errors during initialization
 * */
uint8_t MPU6050_Init(MPU6050 *dev, I2C_HandleTypeDef *hi2c)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	dev->i2cHandle = hi2c;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	683a      	ldr	r2, [r7, #0]
 80004d2:	601a      	str	r2, [r3, #0]

	dev->accel_x = 0;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]
	dev->accel_y = 0;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
	dev->accel_z = 0;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
	dev->gyro_x  = 0;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
	dev->gyro_y  = 0;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2200      	movs	r2, #0
 80004f0:	615a      	str	r2, [r3, #20]
	dev->gyro_z  = 0;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]

	uint8_t errorNumber = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]
	uint8_t regData = 0x00;
 80004fc:	2300      	movs	r3, #0
 80004fe:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status;

	/* Perform Reset Sequence (Page 41) */
	status = MPU6050_ReadRegister(dev, MPU6050_PWR_MGMT_1, &regData);
 8000500:	f107 030d 	add.w	r3, r7, #13
 8000504:	461a      	mov	r2, r3
 8000506:	216b      	movs	r1, #107	; 0x6b
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 f8c4 	bl	8000696 <MPU6050_ReadRegister>
 800050e:	4603      	mov	r3, r0
 8000510:	73bb      	strb	r3, [r7, #14]
	regData &= ~(1 << MPU6050_DEVICE_RESET);
 8000512:	7b7b      	ldrb	r3, [r7, #13]
 8000514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000518:	b2db      	uxtb	r3, r3
 800051a:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, MPU6050_PWR_MGMT_1, &regData);
 800051c:	f107 030d 	add.w	r3, r7, #13
 8000520:	461a      	mov	r2, r3
 8000522:	216b      	movs	r1, #107	; 0x6b
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f8d1 	bl	80006cc <MPU6050_WriteRegister>
 800052a:	4603      	mov	r3, r0
 800052c:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(100);
 800052e:	2064      	movs	r0, #100	; 0x64
 8000530:	f000 fb18 	bl	8000b64 <HAL_Delay>
	errorNumber += (status != HAL_OK);
 8000534:	7bbb      	ldrb	r3, [r7, #14]
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf14      	ite	ne
 800053a:	2301      	movne	r3, #1
 800053c:	2300      	moveq	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	461a      	mov	r2, r3
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	4413      	add	r3, r2
 8000546:	73fb      	strb	r3, [r7, #15]


	status = MPU6050_ReadRegister(dev, MPU6050_SIGNAL_PATH_RESET, &regData);
 8000548:	f107 030d 	add.w	r3, r7, #13
 800054c:	461a      	mov	r2, r3
 800054e:	2168      	movs	r1, #104	; 0x68
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f000 f8a0 	bl	8000696 <MPU6050_ReadRegister>
 8000556:	4603      	mov	r3, r0
 8000558:	73bb      	strb	r3, [r7, #14]
	regData &= ~(7 << 0);	// GYRO_RESET = ACCEL_RESET = TEMP_RESET = Bit 2:0
 800055a:	7b7b      	ldrb	r3, [r7, #13]
 800055c:	f023 0307 	bic.w	r3, r3, #7
 8000560:	b2db      	uxtb	r3, r3
 8000562:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, MPU6050_SIGNAL_PATH_RESET, &regData);
 8000564:	f107 030d 	add.w	r3, r7, #13
 8000568:	461a      	mov	r2, r3
 800056a:	2168      	movs	r1, #104	; 0x68
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f000 f8ad 	bl	80006cc <MPU6050_WriteRegister>
 8000572:	4603      	mov	r3, r0
 8000574:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(100);
 8000576:	2064      	movs	r0, #100	; 0x64
 8000578:	f000 faf4 	bl	8000b64 <HAL_Delay>
	errorNumber += (status != HAL_OK);
 800057c:	7bbb      	ldrb	r3, [r7, #14]
 800057e:	2b00      	cmp	r3, #0
 8000580:	bf14      	ite	ne
 8000582:	2301      	movne	r3, #1
 8000584:	2300      	moveq	r3, #0
 8000586:	b2db      	uxtb	r3, r3
 8000588:	461a      	mov	r2, r3
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	4413      	add	r3, r2
 800058e:	73fb      	strb	r3, [r7, #15]

	regData |= (1 << MPU6050_CLK_PLL_XGYRO);	// Recommended Clock Source
 8000590:	7b7b      	ldrb	r3, [r7, #13]
 8000592:	f043 0302 	orr.w	r3, r3, #2
 8000596:	b2db      	uxtb	r3, r3
 8000598:	737b      	strb	r3, [r7, #13]
	regData &= ~(1 << MPU6050_SLEEP_ENABLE);	// Disable Sleep Enabled
 800059a:	7b7b      	ldrb	r3, [r7, #13]
 800059c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	737b      	strb	r3, [r7, #13]
	regData &= ~(1 << MPU6050_TEMP_DISABLE);	// Temperature Reading Enabled
 80005a4:	7b7b      	ldrb	r3, [r7, #13]
 80005a6:	f023 0308 	bic.w	r3, r3, #8
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	737b      	strb	r3, [r7, #13]

	status = MPU6050_WriteRegister(dev, MPU6050_PWR_MGMT_1, &regData);
 80005ae:	f107 030d 	add.w	r3, r7, #13
 80005b2:	461a      	mov	r2, r3
 80005b4:	216b      	movs	r1, #107	; 0x6b
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 f888 	bl	80006cc <MPU6050_WriteRegister>
 80005bc:	4603      	mov	r3, r0
 80005be:	73bb      	strb	r3, [r7, #14]
	errorNumber += (status != HAL_OK);
 80005c0:	7bbb      	ldrb	r3, [r7, #14]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	bf14      	ite	ne
 80005c6:	2301      	movne	r3, #1
 80005c8:	2300      	moveq	r3, #0
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	461a      	mov	r2, r3
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	4413      	add	r3, r2
 80005d2:	73fb      	strb	r3, [r7, #15]

	/* Gyroscope Settings (Page 14) */
	status = MPU6050_ReadRegister(dev, MPU6050_GYRO_CONFIG, &regData);
 80005d4:	f107 030d 	add.w	r3, r7, #13
 80005d8:	461a      	mov	r2, r3
 80005da:	211b      	movs	r1, #27
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f85a 	bl	8000696 <MPU6050_ReadRegister>
 80005e2:	4603      	mov	r3, r0
 80005e4:	73bb      	strb	r3, [r7, #14]
	errorNumber += (status != HAL_OK);
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf14      	ite	ne
 80005ec:	2301      	movne	r3, #1
 80005ee:	2300      	moveq	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	4413      	add	r3, r2
 80005f8:	73fb      	strb	r3, [r7, #15]

	regData |= (MPU6050_GYRO_FS_250 << 3);
 80005fa:	7b7b      	ldrb	r3, [r7, #13]
 80005fc:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, MPU6050_GYRO_CONFIG, &regData);
 80005fe:	f107 030d 	add.w	r3, r7, #13
 8000602:	461a      	mov	r2, r3
 8000604:	211b      	movs	r1, #27
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f860 	bl	80006cc <MPU6050_WriteRegister>
 800060c:	4603      	mov	r3, r0
 800060e:	73bb      	strb	r3, [r7, #14]
	errorNumber += (status != HAL_OK);
 8000610:	7bbb      	ldrb	r3, [r7, #14]
 8000612:	2b00      	cmp	r3, #0
 8000614:	bf14      	ite	ne
 8000616:	2301      	movne	r3, #1
 8000618:	2300      	moveq	r3, #0
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	4413      	add	r3, r2
 8000622:	73fb      	strb	r3, [r7, #15]

	/* Accelerometer Settings (Page 15) */
	status = MPU6050_ReadRegister(dev, MPU6050_ACCEL_CONFIG, &regData);
 8000624:	f107 030d 	add.w	r3, r7, #13
 8000628:	461a      	mov	r2, r3
 800062a:	211c      	movs	r1, #28
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 f832 	bl	8000696 <MPU6050_ReadRegister>
 8000632:	4603      	mov	r3, r0
 8000634:	73bb      	strb	r3, [r7, #14]
	errorNumber += (status != HAL_OK);
 8000636:	7bbb      	ldrb	r3, [r7, #14]
 8000638:	2b00      	cmp	r3, #0
 800063a:	bf14      	ite	ne
 800063c:	2301      	movne	r3, #1
 800063e:	2300      	moveq	r3, #0
 8000640:	b2db      	uxtb	r3, r3
 8000642:	461a      	mov	r2, r3
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	4413      	add	r3, r2
 8000648:	73fb      	strb	r3, [r7, #15]

	regData |= (MPU6050_ACCEL_FS_2 << 3);
 800064a:	7b7b      	ldrb	r3, [r7, #13]
 800064c:	737b      	strb	r3, [r7, #13]
	status = MPU6050_WriteRegister(dev, MPU6050_ACCEL_CONFIG, &regData);
 800064e:	f107 030d 	add.w	r3, r7, #13
 8000652:	461a      	mov	r2, r3
 8000654:	211c      	movs	r1, #28
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f838 	bl	80006cc <MPU6050_WriteRegister>
 800065c:	4603      	mov	r3, r0
 800065e:	73bb      	strb	r3, [r7, #14]
	errorNumber += (status != HAL_OK);
 8000660:	7bbb      	ldrb	r3, [r7, #14]
 8000662:	2b00      	cmp	r3, #0
 8000664:	bf14      	ite	ne
 8000666:	2301      	movne	r3, #1
 8000668:	2300      	moveq	r3, #0
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4413      	add	r3, r2
 8000672:	73fb      	strb	r3, [r7, #15]


	/* Check if the address is correct */
	MPU6050_ReadRegister(dev, MPU6050_WHO_AM_I, &regData);
 8000674:	f107 030d 	add.w	r3, r7, #13
 8000678:	461a      	mov	r2, r3
 800067a:	2175      	movs	r1, #117	; 0x75
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 f80a 	bl	8000696 <MPU6050_ReadRegister>
	if(regData != 0x68)
 8000682:	7b7b      	ldrb	r3, [r7, #13]
 8000684:	2b68      	cmp	r3, #104	; 0x68
 8000686:	d001      	beq.n	800068c <MPU6050_Init+0x1c8>
		errorNumber = 255;
 8000688:	23ff      	movs	r3, #255	; 0xff
 800068a:	73fb      	strb	r3, [r7, #15]

	return errorNumber;
 800068c:	7bfb      	ldrb	r3, [r7, #15]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <MPU6050_ReadRegister>:
{

}

HAL_StatusTypeDef MPU6050_ReadRegister(MPU6050 *dev, uint8_t reg, uint8_t *data)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b088      	sub	sp, #32
 800069a:	af04      	add	r7, sp, #16
 800069c:	60f8      	str	r0, [r7, #12]
 800069e:	460b      	mov	r3, r1
 80006a0:	607a      	str	r2, [r7, #4]
 80006a2:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	7afb      	ldrb	r3, [r7, #11]
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	9302      	str	r3, [sp, #8]
 80006b2:	2301      	movs	r3, #1
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2301      	movs	r3, #1
 80006bc:	21d0      	movs	r1, #208	; 0xd0
 80006be:	f000 ff35 	bl	800152c <HAL_I2C_Mem_Read>
 80006c2:	4603      	mov	r3, r0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <MPU6050_WriteRegister>:
{
	return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
}

HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050 *dev, uint8_t reg, uint8_t *data)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af04      	add	r7, sp, #16
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	460b      	mov	r3, r1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(dev->i2cHandle, MPU6050_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	7afb      	ldrb	r3, [r7, #11]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	2301      	movs	r3, #1
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	21d0      	movs	r1, #208	; 0xd0
 80006f4:	f000 fe20 	bl	8001338 <HAL_I2C_Mem_Write>
 80006f8:	4603      	mov	r3, r0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_GPIO_Init+0x68>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a16      	ldr	r2, [pc, #88]	; (800076c <MX_GPIO_Init+0x68>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_GPIO_Init+0x68>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_GPIO_Init+0x68>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <MX_GPIO_Init+0x68>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_GPIO_Init+0x68>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_GPIO_Init+0x68>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <MX_GPIO_Init+0x68>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_GPIO_Init+0x68>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000776:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_I2C1_Init+0x54>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_I2C1_Init+0x50>)
 800077c:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_I2C1_Init+0x58>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_I2C1_Init+0x50>)
 800078e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000792:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007ae:	f000 fc7f 	bl	80010b0 <HAL_I2C_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 f8ce 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000028 	.word	0x20000028
 80007c4:	40005400 	.word	0x40005400
 80007c8:	00061a80 	.word	0x00061a80

080007cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a19      	ldr	r2, [pc, #100]	; (8000850 <HAL_I2C_MspInit+0x84>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d12b      	bne.n	8000846 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <HAL_I2C_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <HAL_I2C_MspInit+0x88>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_I2C_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800080a:	23c0      	movs	r3, #192	; 0xc0
 800080c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080e:	2312      	movs	r3, #18
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000816:	2303      	movs	r3, #3
 8000818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800081a:	2304      	movs	r3, #4
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <HAL_I2C_MspInit+0x8c>)
 8000826:	f000 faa7 	bl	8000d78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_I2C_MspInit+0x88>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <HAL_I2C_MspInit+0x88>)
 8000834:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_I2C_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	; 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40005400 	.word	0x40005400
 8000854:	40023800 	.word	0x40023800
 8000858:	40020400 	.word	0x40020400

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000860:	f000 f90e 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000864:	f000 f80e 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000868:	f7ff ff4c 	bl	8000704 <MX_GPIO_Init>
  MX_I2C1_Init();
 800086c:	f7ff ff80 	bl	8000770 <MX_I2C1_Init>
  MPU6050_Init(&sensor, &hi2c1);
 8000870:	4902      	ldr	r1, [pc, #8]	; (800087c <main+0x20>)
 8000872:	4803      	ldr	r0, [pc, #12]	; (8000880 <main+0x24>)
 8000874:	f7ff fe26 	bl	80004c4 <MPU6050_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000878:	e7fe      	b.n	8000878 <main+0x1c>
 800087a:	bf00      	nop
 800087c:	20000028 	.word	0x20000028
 8000880:	2000007c 	.word	0x2000007c

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	; 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f002 f810 	bl	80028b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <SystemClock_Config+0xcc>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a27      	ldr	r2, [pc, #156]	; (8000950 <SystemClock_Config+0xcc>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <SystemClock_Config+0xcc>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <SystemClock_Config+0xd0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <SystemClock_Config+0xd0>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <SystemClock_Config+0xd0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e8:	2310      	movs	r3, #16
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ec:	2302      	movs	r3, #2
 80008ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f4:	2308      	movs	r3, #8
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008f8:	23a8      	movs	r3, #168	; 0xa8
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fb91 	bl	8002030 <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000914:	f000 f820 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2302      	movs	r3, #2
 800091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000924:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2105      	movs	r1, #5
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fdf2 	bl	8002520 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000942:	f000 f809 	bl	8000958 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3750      	adds	r7, #80	; 0x50
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f890 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a32:	490e      	ldr	r1, [pc, #56]	; (8000a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a48:	4c0b      	ldr	r4, [pc, #44]	; (8000a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a56:	f7ff ffd7 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f001 ff35 	bl	80028c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5e:	f7ff fefd 	bl	800085c <main>
  bx  lr    
 8000a62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a70:	08002950 	.word	0x08002950
  ldr r2, =_sbss
 8000a74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a78:	200000a0 	.word	0x200000a0

08000a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <HAL_Init+0x40>)
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <HAL_Init+0x40>)
 8000a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HAL_Init+0x40>)
 8000aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f000 f931 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	200f      	movs	r0, #15
 8000ab0:	f000 f808 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab4:	f7ff ff56 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023c00 	.word	0x40023c00

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x54>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x58>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f93b 	bl	8000d5e <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f000 f911 	bl	8000d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_InitTick+0x5c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	2000009c 	.word	0x2000009c

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	2000009c 	.word	0x2000009c

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff ffee 	bl	8000b4c <HAL_GetTick>
 8000b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b8a:	bf00      	nop
 8000b8c:	f7ff ffde 	bl	8000b4c <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	210f      	movs	r1, #15
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f7ff ff8e 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff47 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff5c 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ff8e 	bl	8000c64 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5d 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffb0 	bl	8000ccc <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e16b      	b.n	800106c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 815a 	bne.w	8001066 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d005      	beq.n	8000dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d130      	bne.n	8000e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	68da      	ldr	r2, [r3, #12]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	f003 0201 	and.w	r2, r3, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d017      	beq.n	8000e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	69b9      	ldr	r1, [r7, #24]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80b4 	beq.w	8001066 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b60      	ldr	r3, [pc, #384]	; (8001084 <HAL_GPIO_Init+0x30c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a5f      	ldr	r2, [pc, #380]	; (8001084 <HAL_GPIO_Init+0x30c>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b5d      	ldr	r3, [pc, #372]	; (8001084 <HAL_GPIO_Init+0x30c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1a:	4a5b      	ldr	r2, [pc, #364]	; (8001088 <HAL_GPIO_Init+0x310>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a52      	ldr	r2, [pc, #328]	; (800108c <HAL_GPIO_Init+0x314>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d02b      	beq.n	8000f9e <HAL_GPIO_Init+0x226>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a51      	ldr	r2, [pc, #324]	; (8001090 <HAL_GPIO_Init+0x318>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d025      	beq.n	8000f9a <HAL_GPIO_Init+0x222>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a50      	ldr	r2, [pc, #320]	; (8001094 <HAL_GPIO_Init+0x31c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d01f      	beq.n	8000f96 <HAL_GPIO_Init+0x21e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4f      	ldr	r2, [pc, #316]	; (8001098 <HAL_GPIO_Init+0x320>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x21a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4e      	ldr	r2, [pc, #312]	; (800109c <HAL_GPIO_Init+0x324>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x216>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4d      	ldr	r2, [pc, #308]	; (80010a0 <HAL_GPIO_Init+0x328>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x212>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4c      	ldr	r2, [pc, #304]	; (80010a4 <HAL_GPIO_Init+0x32c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x20e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4b      	ldr	r2, [pc, #300]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x20a>
 8000f7e:	2307      	movs	r3, #7
 8000f80:	e00e      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f82:	2308      	movs	r3, #8
 8000f84:	e00c      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f86:	2306      	movs	r3, #6
 8000f88:	e00a      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e008      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f92:	2303      	movs	r3, #3
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	f002 0203 	and.w	r2, r2, #3
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb0:	4935      	ldr	r1, [pc, #212]	; (8001088 <HAL_GPIO_Init+0x310>)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <HAL_GPIO_Init+0x334>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe2:	4a32      	ldr	r2, [pc, #200]	; (80010ac <HAL_GPIO_Init+0x334>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <HAL_GPIO_Init+0x334>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <HAL_GPIO_Init+0x334>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <HAL_GPIO_Init+0x334>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001036:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <HAL_GPIO_Init+0x334>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_GPIO_Init+0x334>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001060:	4a12      	ldr	r2, [pc, #72]	; (80010ac <HAL_GPIO_Init+0x334>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3301      	adds	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	f67f ae90 	bls.w	8000d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40013800 	.word	0x40013800
 800108c:	40020000 	.word	0x40020000
 8001090:	40020400 	.word	0x40020400
 8001094:	40020800 	.word	0x40020800
 8001098:	40020c00 	.word	0x40020c00
 800109c:	40021000 	.word	0x40021000
 80010a0:	40021400 	.word	0x40021400
 80010a4:	40021800 	.word	0x40021800
 80010a8:	40021c00 	.word	0x40021c00
 80010ac:	40013c00 	.word	0x40013c00

080010b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e12b      	b.n	800131a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d106      	bne.n	80010dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fb78 	bl	80007cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2224      	movs	r2, #36	; 0x24
 80010e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0201 	bic.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001102:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001112:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001114:	f001 fbbc 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 8001118:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4a81      	ldr	r2, [pc, #516]	; (8001324 <HAL_I2C_Init+0x274>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d807      	bhi.n	8001134 <HAL_I2C_Init+0x84>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4a80      	ldr	r2, [pc, #512]	; (8001328 <HAL_I2C_Init+0x278>)
 8001128:	4293      	cmp	r3, r2
 800112a:	bf94      	ite	ls
 800112c:	2301      	movls	r3, #1
 800112e:	2300      	movhi	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	e006      	b.n	8001142 <HAL_I2C_Init+0x92>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4a7d      	ldr	r2, [pc, #500]	; (800132c <HAL_I2C_Init+0x27c>)
 8001138:	4293      	cmp	r3, r2
 800113a:	bf94      	ite	ls
 800113c:	2301      	movls	r3, #1
 800113e:	2300      	movhi	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e0e7      	b.n	800131a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4a78      	ldr	r2, [pc, #480]	; (8001330 <HAL_I2C_Init+0x280>)
 800114e:	fba2 2303 	umull	r2, r3, r2, r3
 8001152:	0c9b      	lsrs	r3, r3, #18
 8001154:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	430a      	orrs	r2, r1
 8001168:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	4a6a      	ldr	r2, [pc, #424]	; (8001324 <HAL_I2C_Init+0x274>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d802      	bhi.n	8001184 <HAL_I2C_Init+0xd4>
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	3301      	adds	r3, #1
 8001182:	e009      	b.n	8001198 <HAL_I2C_Init+0xe8>
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	4a69      	ldr	r2, [pc, #420]	; (8001334 <HAL_I2C_Init+0x284>)
 8001190:	fba2 2303 	umull	r2, r3, r2, r3
 8001194:	099b      	lsrs	r3, r3, #6
 8001196:	3301      	adds	r3, #1
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	430b      	orrs	r3, r1
 800119e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	495c      	ldr	r1, [pc, #368]	; (8001324 <HAL_I2C_Init+0x274>)
 80011b4:	428b      	cmp	r3, r1
 80011b6:	d819      	bhi.n	80011ec <HAL_I2C_Init+0x13c>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1e59      	subs	r1, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c6:	1c59      	adds	r1, r3, #1
 80011c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011cc:	400b      	ands	r3, r1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00a      	beq.n	80011e8 <HAL_I2C_Init+0x138>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	1e59      	subs	r1, r3, #1
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80011e0:	3301      	adds	r3, #1
 80011e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e6:	e051      	b.n	800128c <HAL_I2C_Init+0x1dc>
 80011e8:	2304      	movs	r3, #4
 80011ea:	e04f      	b.n	800128c <HAL_I2C_Init+0x1dc>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d111      	bne.n	8001218 <HAL_I2C_Init+0x168>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	1e58      	subs	r0, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6859      	ldr	r1, [r3, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	440b      	add	r3, r1
 8001202:	fbb0 f3f3 	udiv	r3, r0, r3
 8001206:	3301      	adds	r3, #1
 8001208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf0c      	ite	eq
 8001210:	2301      	moveq	r3, #1
 8001212:	2300      	movne	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	e012      	b.n	800123e <HAL_I2C_Init+0x18e>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	1e58      	subs	r0, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6859      	ldr	r1, [r3, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	0099      	lsls	r1, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	fbb0 f3f3 	udiv	r3, r0, r3
 800122e:	3301      	adds	r3, #1
 8001230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001234:	2b00      	cmp	r3, #0
 8001236:	bf0c      	ite	eq
 8001238:	2301      	moveq	r3, #1
 800123a:	2300      	movne	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_I2C_Init+0x196>
 8001242:	2301      	movs	r3, #1
 8001244:	e022      	b.n	800128c <HAL_I2C_Init+0x1dc>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10e      	bne.n	800126c <HAL_I2C_Init+0x1bc>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1e58      	subs	r0, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6859      	ldr	r1, [r3, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	440b      	add	r3, r1
 800125c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001260:	3301      	adds	r3, #1
 8001262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800126a:	e00f      	b.n	800128c <HAL_I2C_Init+0x1dc>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	0099      	lsls	r1, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001282:	3301      	adds	r3, #1
 8001284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	6809      	ldr	r1, [r1, #0]
 8001290:	4313      	orrs	r3, r2
 8001292:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69da      	ldr	r2, [r3, #28]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6911      	ldr	r1, [r2, #16]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68d2      	ldr	r2, [r2, #12]
 80012c6:	4311      	orrs	r1, r2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0201 	orr.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2220      	movs	r2, #32
 8001306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	000186a0 	.word	0x000186a0
 8001328:	001e847f 	.word	0x001e847f
 800132c:	003d08ff 	.word	0x003d08ff
 8001330:	431bde83 	.word	0x431bde83
 8001334:	10624dd3 	.word	0x10624dd3

08001338 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af02      	add	r7, sp, #8
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	4608      	mov	r0, r1
 8001342:	4611      	mov	r1, r2
 8001344:	461a      	mov	r2, r3
 8001346:	4603      	mov	r3, r0
 8001348:	817b      	strh	r3, [r7, #10]
 800134a:	460b      	mov	r3, r1
 800134c:	813b      	strh	r3, [r7, #8]
 800134e:	4613      	mov	r3, r2
 8001350:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001352:	f7ff fbfb 	bl	8000b4c <HAL_GetTick>
 8001356:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b20      	cmp	r3, #32
 8001362:	f040 80d9 	bne.w	8001518 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2319      	movs	r3, #25
 800136c:	2201      	movs	r2, #1
 800136e:	496d      	ldr	r1, [pc, #436]	; (8001524 <HAL_I2C_Mem_Write+0x1ec>)
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 fc7f 	bl	8001c74 <I2C_WaitOnFlagUntilTimeout>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800137c:	2302      	movs	r3, #2
 800137e:	e0cc      	b.n	800151a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_I2C_Mem_Write+0x56>
 800138a:	2302      	movs	r3, #2
 800138c:	e0c5      	b.n	800151a <HAL_I2C_Mem_Write+0x1e2>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d007      	beq.n	80013b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0201 	orr.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2221      	movs	r2, #33	; 0x21
 80013c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2240      	movs	r2, #64	; 0x40
 80013d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6a3a      	ldr	r2, [r7, #32]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4a4d      	ldr	r2, [pc, #308]	; (8001528 <HAL_I2C_Mem_Write+0x1f0>)
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013f6:	88f8      	ldrh	r0, [r7, #6]
 80013f8:	893a      	ldrh	r2, [r7, #8]
 80013fa:	8979      	ldrh	r1, [r7, #10]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	4603      	mov	r3, r0
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 fab6 	bl	8001978 <I2C_RequestMemoryWrite>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d052      	beq.n	80014b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e081      	b.n	800151a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 fd00 	bl	8001e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00d      	beq.n	8001442 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	2b04      	cmp	r3, #4
 800142c:	d107      	bne.n	800143e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800143c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e06b      	b.n	800151a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145c:	3b01      	subs	r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001468:	b29b      	uxth	r3, r3
 800146a:	3b01      	subs	r3, #1
 800146c:	b29a      	uxth	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b04      	cmp	r3, #4
 800147e:	d11b      	bne.n	80014b8 <HAL_I2C_Mem_Write+0x180>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001484:	2b00      	cmp	r3, #0
 8001486:	d017      	beq.n	80014b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	3b01      	subs	r3, #1
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1aa      	bne.n	8001416 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f000 fcec 	bl	8001ea2 <I2C_WaitOnBTFFlagUntilTimeout>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00d      	beq.n	80014ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d107      	bne.n	80014e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e016      	b.n	800151a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2220      	movs	r2, #32
 8001500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	e000      	b.n	800151a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001518:	2302      	movs	r3, #2
  }
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	00100002 	.word	0x00100002
 8001528:	ffff0000 	.word	0xffff0000

0800152c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	; 0x30
 8001530:	af02      	add	r7, sp, #8
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	4608      	mov	r0, r1
 8001536:	4611      	mov	r1, r2
 8001538:	461a      	mov	r2, r3
 800153a:	4603      	mov	r3, r0
 800153c:	817b      	strh	r3, [r7, #10]
 800153e:	460b      	mov	r3, r1
 8001540:	813b      	strh	r3, [r7, #8]
 8001542:	4613      	mov	r3, r2
 8001544:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001546:	f7ff fb01 	bl	8000b4c <HAL_GetTick>
 800154a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b20      	cmp	r3, #32
 8001556:	f040 8208 	bne.w	800196a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2319      	movs	r3, #25
 8001560:	2201      	movs	r2, #1
 8001562:	497b      	ldr	r1, [pc, #492]	; (8001750 <HAL_I2C_Mem_Read+0x224>)
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 fb85 	bl	8001c74 <I2C_WaitOnFlagUntilTimeout>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001570:	2302      	movs	r3, #2
 8001572:	e1fb      	b.n	800196c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800157a:	2b01      	cmp	r3, #1
 800157c:	d101      	bne.n	8001582 <HAL_I2C_Mem_Read+0x56>
 800157e:	2302      	movs	r3, #2
 8001580:	e1f4      	b.n	800196c <HAL_I2C_Mem_Read+0x440>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d007      	beq.n	80015a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2222      	movs	r2, #34	; 0x22
 80015bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2240      	movs	r2, #64	; 0x40
 80015c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80015d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015de:	b29a      	uxth	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4a5b      	ldr	r2, [pc, #364]	; (8001754 <HAL_I2C_Mem_Read+0x228>)
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015ea:	88f8      	ldrh	r0, [r7, #6]
 80015ec:	893a      	ldrh	r2, [r7, #8]
 80015ee:	8979      	ldrh	r1, [r7, #10]
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	4603      	mov	r3, r0
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 fa52 	bl	8001aa4 <I2C_RequestMemoryRead>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e1b0      	b.n	800196c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160e:	2b00      	cmp	r3, #0
 8001610:	d113      	bne.n	800163a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001612:	2300      	movs	r3, #0
 8001614:	623b      	str	r3, [r7, #32]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	623b      	str	r3, [r7, #32]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	623b      	str	r3, [r7, #32]
 8001626:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e184      	b.n	8001944 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163e:	2b01      	cmp	r3, #1
 8001640:	d11b      	bne.n	800167a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001650:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e164      	b.n	8001944 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167e:	2b02      	cmp	r3, #2
 8001680:	d11b      	bne.n	80016ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001690:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	61bb      	str	r3, [r7, #24]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	e144      	b.n	8001944 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80016d0:	e138      	b.n	8001944 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	f200 80f1 	bhi.w	80018be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d123      	bne.n	800172c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 fc1b 	bl	8001f24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e139      	b.n	800196c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	691a      	ldr	r2, [r3, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001714:	3b01      	subs	r3, #1
 8001716:	b29a      	uxth	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001720:	b29b      	uxth	r3, r3
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	855a      	strh	r2, [r3, #42]	; 0x2a
 800172a:	e10b      	b.n	8001944 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001730:	2b02      	cmp	r3, #2
 8001732:	d14e      	bne.n	80017d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800173a:	2200      	movs	r2, #0
 800173c:	4906      	ldr	r1, [pc, #24]	; (8001758 <HAL_I2C_Mem_Read+0x22c>)
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 fa98 	bl	8001c74 <I2C_WaitOnFlagUntilTimeout>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d008      	beq.n	800175c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e10e      	b.n	800196c <HAL_I2C_Mem_Read+0x440>
 800174e:	bf00      	nop
 8001750:	00100002 	.word	0x00100002
 8001754:	ffff0000 	.word	0xffff0000
 8001758:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800176a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691a      	ldr	r2, [r3, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001788:	3b01      	subs	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001794:	b29b      	uxth	r3, r3
 8001796:	3b01      	subs	r3, #1
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017d0:	e0b8      	b.n	8001944 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017d8:	2200      	movs	r2, #0
 80017da:	4966      	ldr	r1, [pc, #408]	; (8001974 <HAL_I2C_Mem_Read+0x448>)
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 fa49 	bl	8001c74 <I2C_WaitOnFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0bf      	b.n	800196c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001818:	3b01      	subs	r3, #1
 800181a:	b29a      	uxth	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001824:	b29b      	uxth	r3, r3
 8001826:	3b01      	subs	r3, #1
 8001828:	b29a      	uxth	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001834:	2200      	movs	r2, #0
 8001836:	494f      	ldr	r1, [pc, #316]	; (8001974 <HAL_I2C_Mem_Read+0x448>)
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 fa1b 	bl	8001c74 <I2C_WaitOnFlagUntilTimeout>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e091      	b.n	800196c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001874:	3b01      	subs	r3, #1
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001880:	b29b      	uxth	r3, r3
 8001882:	3b01      	subs	r3, #1
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018bc:	e042      	b.n	8001944 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 fb2e 	bl	8001f24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e04c      	b.n	800196c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	3b01      	subs	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b04      	cmp	r3, #4
 8001910:	d118      	bne.n	8001944 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192e:	3b01      	subs	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193a:	b29b      	uxth	r3, r3
 800193c:	3b01      	subs	r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	f47f aec2 	bne.w	80016d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2220      	movs	r2, #32
 8001952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800196a:	2302      	movs	r3, #2
  }
}
 800196c:	4618      	mov	r0, r3
 800196e:	3728      	adds	r7, #40	; 0x28
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	00010004 	.word	0x00010004

08001978 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af02      	add	r7, sp, #8
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	4608      	mov	r0, r1
 8001982:	4611      	mov	r1, r2
 8001984:	461a      	mov	r2, r3
 8001986:	4603      	mov	r3, r0
 8001988:	817b      	strh	r3, [r7, #10]
 800198a:	460b      	mov	r3, r1
 800198c:	813b      	strh	r3, [r7, #8]
 800198e:	4613      	mov	r3, r2
 8001990:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f960 	bl	8001c74 <I2C_WaitOnFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00d      	beq.n	80019d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c8:	d103      	bne.n	80019d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e05f      	b.n	8001a96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	6a3a      	ldr	r2, [r7, #32]
 80019ea:	492d      	ldr	r1, [pc, #180]	; (8001aa0 <I2C_RequestMemoryWrite+0x128>)
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 f998 	bl	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e04c      	b.n	8001a96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a14:	6a39      	ldr	r1, [r7, #32]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fa02 	bl	8001e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00d      	beq.n	8001a3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d107      	bne.n	8001a3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e02b      	b.n	8001a96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a44:	893b      	ldrh	r3, [r7, #8]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	611a      	str	r2, [r3, #16]
 8001a4e:	e021      	b.n	8001a94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a50:	893b      	ldrh	r3, [r7, #8]
 8001a52:	0a1b      	lsrs	r3, r3, #8
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a60:	6a39      	ldr	r1, [r7, #32]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f9dc 	bl	8001e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00d      	beq.n	8001a8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d107      	bne.n	8001a86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e005      	b.n	8001a96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a8a:	893b      	ldrh	r3, [r7, #8]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	00010002 	.word	0x00010002

08001aa4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	817b      	strh	r3, [r7, #10]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	813b      	strh	r3, [r7, #8]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001acc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001adc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 f8c2 	bl	8001c74 <I2C_WaitOnFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00d      	beq.n	8001b12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b04:	d103      	bne.n	8001b0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e0aa      	b.n	8001c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b12:	897b      	ldrh	r3, [r7, #10]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	6a3a      	ldr	r2, [r7, #32]
 8001b26:	4952      	ldr	r1, [pc, #328]	; (8001c70 <I2C_RequestMemoryRead+0x1cc>)
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f8fa 	bl	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e097      	b.n	8001c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b50:	6a39      	ldr	r1, [r7, #32]
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f964 	bl	8001e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00d      	beq.n	8001b7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d107      	bne.n	8001b76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e076      	b.n	8001c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b80:	893b      	ldrh	r3, [r7, #8]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	e021      	b.n	8001bd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b8c:	893b      	ldrh	r3, [r7, #8]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9c:	6a39      	ldr	r1, [r7, #32]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f93e 	bl	8001e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00d      	beq.n	8001bc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d107      	bne.n	8001bc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e050      	b.n	8001c68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bc6:	893b      	ldrh	r3, [r7, #8]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd2:	6a39      	ldr	r1, [r7, #32]
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f923 	bl	8001e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00d      	beq.n	8001bfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d107      	bne.n	8001bf8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e035      	b.n	8001c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f82b 	bl	8001c74 <I2C_WaitOnFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00d      	beq.n	8001c40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c32:	d103      	bne.n	8001c3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e013      	b.n	8001c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c40:	897b      	ldrh	r3, [r7, #10]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	6a3a      	ldr	r2, [r7, #32]
 8001c54:	4906      	ldr	r1, [pc, #24]	; (8001c70 <I2C_RequestMemoryRead+0x1cc>)
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f863 	bl	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	00010002 	.word	0x00010002

08001c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c84:	e025      	b.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d021      	beq.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8e:	f7fe ff5d 	bl	8000b4c <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d302      	bcc.n	8001ca4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d116      	bne.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f043 0220 	orr.w	r2, r3, #32
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e023      	b.n	8001d1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	0c1b      	lsrs	r3, r3, #16
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d10d      	bne.n	8001cf8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bf0c      	ite	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	2300      	movne	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	e00c      	b.n	8001d12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4013      	ands	r3, r2
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf0c      	ite	eq
 8001d0a:	2301      	moveq	r3, #1
 8001d0c:	2300      	movne	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d0b6      	beq.n	8001c86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d30:	e051      	b.n	8001dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d40:	d123      	bne.n	8001d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2220      	movs	r2, #32
 8001d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f043 0204 	orr.w	r2, r3, #4
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e046      	b.n	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d021      	beq.n	8001dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d92:	f7fe fedb 	bl	8000b4c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d302      	bcc.n	8001da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d116      	bne.n	8001dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f043 0220 	orr.w	r2, r3, #32
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e020      	b.n	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d10c      	bne.n	8001dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	43da      	mvns	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4013      	ands	r3, r2
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bf14      	ite	ne
 8001df2:	2301      	movne	r3, #1
 8001df4:	2300      	moveq	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	e00b      	b.n	8001e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	43da      	mvns	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	4013      	ands	r3, r2
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bf14      	ite	ne
 8001e0c:	2301      	movne	r3, #1
 8001e0e:	2300      	moveq	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d18d      	bne.n	8001d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e2c:	e02d      	b.n	8001e8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f8ce 	bl	8001fd0 <I2C_IsAcknowledgeFailed>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e02d      	b.n	8001e9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d021      	beq.n	8001e8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e46:	f7fe fe81 	bl	8000b4c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d302      	bcc.n	8001e5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d116      	bne.n	8001e8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f043 0220 	orr.w	r2, r3, #32
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e007      	b.n	8001e9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e94:	2b80      	cmp	r3, #128	; 0x80
 8001e96:	d1ca      	bne.n	8001e2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001eae:	e02d      	b.n	8001f0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f88d 	bl	8001fd0 <I2C_IsAcknowledgeFailed>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e02d      	b.n	8001f1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec6:	d021      	beq.n	8001f0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec8:	f7fe fe40 	bl	8000b4c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d302      	bcc.n	8001ede <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d116      	bne.n	8001f0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e007      	b.n	8001f1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d1ca      	bne.n	8001eb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f30:	e042      	b.n	8001fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	d119      	bne.n	8001f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0210 	mvn.w	r2, #16
 8001f48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e029      	b.n	8001fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f74:	f7fe fdea 	bl	8000b4c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d302      	bcc.n	8001f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d116      	bne.n	8001fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f043 0220 	orr.w	r2, r3, #32
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e007      	b.n	8001fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc2:	2b40      	cmp	r3, #64	; 0x40
 8001fc4:	d1b5      	bne.n	8001f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe6:	d11b      	bne.n	8002020 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ff0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f043 0204 	orr.w	r2, r3, #4
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e267      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d075      	beq.n	800213a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800204e:	4b88      	ldr	r3, [pc, #544]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b04      	cmp	r3, #4
 8002058:	d00c      	beq.n	8002074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205a:	4b85      	ldr	r3, [pc, #532]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002062:	2b08      	cmp	r3, #8
 8002064:	d112      	bne.n	800208c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002066:	4b82      	ldr	r3, [pc, #520]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002072:	d10b      	bne.n	800208c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	4b7e      	ldr	r3, [pc, #504]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d05b      	beq.n	8002138 <HAL_RCC_OscConfig+0x108>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d157      	bne.n	8002138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e242      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002094:	d106      	bne.n	80020a4 <HAL_RCC_OscConfig+0x74>
 8002096:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a75      	ldr	r2, [pc, #468]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e01d      	b.n	80020e0 <HAL_RCC_OscConfig+0xb0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x98>
 80020ae:	4b70      	ldr	r3, [pc, #448]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a6f      	ldr	r2, [pc, #444]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b6d      	ldr	r3, [pc, #436]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a6c      	ldr	r2, [pc, #432]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0xb0>
 80020c8:	4b69      	ldr	r3, [pc, #420]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a68      	ldr	r2, [pc, #416]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 80020ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b66      	ldr	r3, [pc, #408]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a65      	ldr	r2, [pc, #404]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 80020da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7fe fd30 	bl	8000b4c <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f0:	f7fe fd2c 	bl	8000b4c <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e207      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b5b      	ldr	r3, [pc, #364]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0xc0>
 800210e:	e014      	b.n	800213a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7fe fd1c 	bl	8000b4c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002118:	f7fe fd18 	bl	8000b4c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	; 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e1f3      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	4b51      	ldr	r3, [pc, #324]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0xe8>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d063      	beq.n	800220e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002146:	4b4a      	ldr	r3, [pc, #296]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800215a:	2b08      	cmp	r3, #8
 800215c:	d11c      	bne.n	8002198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215e:	4b44      	ldr	r3, [pc, #272]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d116      	bne.n	8002198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216a:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x152>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e1c7      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002182:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4937      	ldr	r1, [pc, #220]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	e03a      	b.n	800220e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d020      	beq.n	80021e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a0:	4b34      	ldr	r3, [pc, #208]	; (8002274 <HAL_RCC_OscConfig+0x244>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7fe fcd1 	bl	8000b4c <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ae:	f7fe fccd 	bl	8000b4c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e1a8      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	4b28      	ldr	r3, [pc, #160]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4925      	ldr	r1, [pc, #148]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]
 80021e0:	e015      	b.n	800220e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e2:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_RCC_OscConfig+0x244>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7fe fcb0 	bl	8000b4c <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f0:	f7fe fcac 	bl	8000b4c <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e187      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002202:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d036      	beq.n	8002288 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d016      	beq.n	8002250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <HAL_RCC_OscConfig+0x248>)
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002228:	f7fe fc90 	bl	8000b4c <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002230:	f7fe fc8c 	bl	8000b4c <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e167      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_OscConfig+0x240>)
 8002244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x200>
 800224e:	e01b      	b.n	8002288 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_RCC_OscConfig+0x248>)
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7fe fc79 	bl	8000b4c <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	e00e      	b.n	800227c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225e:	f7fe fc75 	bl	8000b4c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d907      	bls.n	800227c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e150      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
 8002270:	40023800 	.word	0x40023800
 8002274:	42470000 	.word	0x42470000
 8002278:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227c:	4b88      	ldr	r3, [pc, #544]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 800227e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ea      	bne.n	800225e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8097 	beq.w	80023c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229a:	4b81      	ldr	r3, [pc, #516]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10f      	bne.n	80022c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	4b7d      	ldr	r3, [pc, #500]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	4a7c      	ldr	r2, [pc, #496]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6413      	str	r3, [r2, #64]	; 0x40
 80022b6:	4b7a      	ldr	r3, [pc, #488]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	4b77      	ldr	r3, [pc, #476]	; (80024a4 <HAL_RCC_OscConfig+0x474>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d2:	4b74      	ldr	r3, [pc, #464]	; (80024a4 <HAL_RCC_OscConfig+0x474>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a73      	ldr	r2, [pc, #460]	; (80024a4 <HAL_RCC_OscConfig+0x474>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7fe fc35 	bl	8000b4c <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7fe fc31 	bl	8000b4c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e10c      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	4b6a      	ldr	r3, [pc, #424]	; (80024a4 <HAL_RCC_OscConfig+0x474>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x2ea>
 800230c:	4b64      	ldr	r3, [pc, #400]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	4a63      	ldr	r2, [pc, #396]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6713      	str	r3, [r2, #112]	; 0x70
 8002318:	e01c      	b.n	8002354 <HAL_RCC_OscConfig+0x324>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b05      	cmp	r3, #5
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x30c>
 8002322:	4b5f      	ldr	r3, [pc, #380]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	4a5e      	ldr	r2, [pc, #376]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 8002328:	f043 0304 	orr.w	r3, r3, #4
 800232c:	6713      	str	r3, [r2, #112]	; 0x70
 800232e:	4b5c      	ldr	r3, [pc, #368]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	4a5b      	ldr	r2, [pc, #364]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6713      	str	r3, [r2, #112]	; 0x70
 800233a:	e00b      	b.n	8002354 <HAL_RCC_OscConfig+0x324>
 800233c:	4b58      	ldr	r3, [pc, #352]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	4a57      	ldr	r2, [pc, #348]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	6713      	str	r3, [r2, #112]	; 0x70
 8002348:	4b55      	ldr	r3, [pc, #340]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234c:	4a54      	ldr	r2, [pc, #336]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 800234e:	f023 0304 	bic.w	r3, r3, #4
 8002352:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d015      	beq.n	8002388 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7fe fbf6 	bl	8000b4c <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002362:	e00a      	b.n	800237a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002364:	f7fe fbf2 	bl	8000b4c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e0cb      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237a:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0ee      	beq.n	8002364 <HAL_RCC_OscConfig+0x334>
 8002386:	e014      	b.n	80023b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002388:	f7fe fbe0 	bl	8000b4c <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002390:	f7fe fbdc 	bl	8000b4c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	; 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e0b5      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a6:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1ee      	bne.n	8002390 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d105      	bne.n	80023c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b8:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	4a38      	ldr	r2, [pc, #224]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 80023be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80a1 	beq.w	8002510 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d05c      	beq.n	8002494 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d141      	bne.n	8002466 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e2:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <HAL_RCC_OscConfig+0x478>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe fbb0 	bl	8000b4c <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f0:	f7fe fbac 	bl	8000b4c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e087      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69da      	ldr	r2, [r3, #28]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	019b      	lsls	r3, r3, #6
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	3b01      	subs	r3, #1
 8002428:	041b      	lsls	r3, r3, #16
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	061b      	lsls	r3, r3, #24
 8002432:	491b      	ldr	r1, [pc, #108]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x478>)
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7fe fb85 	bl	8000b4c <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002446:	f7fe fb81 	bl	8000b4c <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e05c      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x416>
 8002464:	e054      	b.n	8002510 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_RCC_OscConfig+0x478>)
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe fb6e 	bl	8000b4c <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe fb6a 	bl	8000b4c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e045      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_RCC_OscConfig+0x470>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x444>
 8002492:	e03d      	b.n	8002510 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d107      	bne.n	80024ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e038      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40007000 	.word	0x40007000
 80024a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_RCC_OscConfig+0x4ec>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d028      	beq.n	800250c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d121      	bne.n	800250c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d11a      	bne.n	800250c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024dc:	4013      	ands	r3, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d111      	bne.n	800250c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	085b      	lsrs	r3, r3, #1
 80024f4:	3b01      	subs	r3, #1
 80024f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d107      	bne.n	800250c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800

08002520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0cc      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002534:	4b68      	ldr	r3, [pc, #416]	; (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d90c      	bls.n	800255c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002542:	4b65      	ldr	r3, [pc, #404]	; (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254a:	4b63      	ldr	r3, [pc, #396]	; (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0b8      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002574:	4b59      	ldr	r3, [pc, #356]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4a58      	ldr	r2, [pc, #352]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800257e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800258c:	4b53      	ldr	r3, [pc, #332]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4a52      	ldr	r2, [pc, #328]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002598:	4b50      	ldr	r3, [pc, #320]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	494d      	ldr	r1, [pc, #308]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d044      	beq.n	8002640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d119      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e07f      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d003      	beq.n	80025de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025de:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e06f      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ee:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e067      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fe:	4b37      	ldr	r3, [pc, #220]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f023 0203 	bic.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4934      	ldr	r1, [pc, #208]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	4313      	orrs	r3, r2
 800260e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002610:	f7fe fa9c 	bl	8000b4c <HAL_GetTick>
 8002614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	e00a      	b.n	800262e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7fe fa98 	bl	8000b4c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e04f      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 020c 	and.w	r2, r3, #12
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	429a      	cmp	r2, r3
 800263e:	d1eb      	bne.n	8002618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002640:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d20c      	bcs.n	8002668 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e032      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4916      	ldr	r1, [pc, #88]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d009      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002692:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	490e      	ldr	r1, [pc, #56]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026a6:	f000 f821 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 80026aa:	4602      	mov	r2, r0
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	490a      	ldr	r1, [pc, #40]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	5ccb      	ldrb	r3, [r1, r3]
 80026ba:	fa22 f303 	lsr.w	r3, r2, r3
 80026be:	4a09      	ldr	r2, [pc, #36]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe f9fc 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023c00 	.word	0x40023c00
 80026dc:	40023800 	.word	0x40023800
 80026e0:	08002928 	.word	0x08002928
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000004 	.word	0x20000004

080026ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f0:	b090      	sub	sp, #64	; 0x40
 80026f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	637b      	str	r3, [r7, #52]	; 0x34
 80026f8:	2300      	movs	r3, #0
 80026fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026fc:	2300      	movs	r3, #0
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002704:	4b59      	ldr	r3, [pc, #356]	; (800286c <HAL_RCC_GetSysClockFreq+0x180>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b08      	cmp	r3, #8
 800270e:	d00d      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x40>
 8002710:	2b08      	cmp	r3, #8
 8002712:	f200 80a1 	bhi.w	8002858 <HAL_RCC_GetSysClockFreq+0x16c>
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x34>
 800271a:	2b04      	cmp	r3, #4
 800271c:	d003      	beq.n	8002726 <HAL_RCC_GetSysClockFreq+0x3a>
 800271e:	e09b      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4b53      	ldr	r3, [pc, #332]	; (8002870 <HAL_RCC_GetSysClockFreq+0x184>)
 8002722:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002724:	e09b      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002726:	4b53      	ldr	r3, [pc, #332]	; (8002874 <HAL_RCC_GetSysClockFreq+0x188>)
 8002728:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800272a:	e098      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800272c:	4b4f      	ldr	r3, [pc, #316]	; (800286c <HAL_RCC_GetSysClockFreq+0x180>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002736:	4b4d      	ldr	r3, [pc, #308]	; (800286c <HAL_RCC_GetSysClockFreq+0x180>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d028      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002742:	4b4a      	ldr	r3, [pc, #296]	; (800286c <HAL_RCC_GetSysClockFreq+0x180>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	2200      	movs	r2, #0
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	627a      	str	r2, [r7, #36]	; 0x24
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002754:	2100      	movs	r1, #0
 8002756:	4b47      	ldr	r3, [pc, #284]	; (8002874 <HAL_RCC_GetSysClockFreq+0x188>)
 8002758:	fb03 f201 	mul.w	r2, r3, r1
 800275c:	2300      	movs	r3, #0
 800275e:	fb00 f303 	mul.w	r3, r0, r3
 8002762:	4413      	add	r3, r2
 8002764:	4a43      	ldr	r2, [pc, #268]	; (8002874 <HAL_RCC_GetSysClockFreq+0x188>)
 8002766:	fba0 1202 	umull	r1, r2, r0, r2
 800276a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800276c:	460a      	mov	r2, r1
 800276e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002772:	4413      	add	r3, r2
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002778:	2200      	movs	r2, #0
 800277a:	61bb      	str	r3, [r7, #24]
 800277c:	61fa      	str	r2, [r7, #28]
 800277e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002782:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002786:	f7fd fd1f 	bl	80001c8 <__aeabi_uldivmod>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4613      	mov	r3, r2
 8002790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002792:	e053      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002794:	4b35      	ldr	r3, [pc, #212]	; (800286c <HAL_RCC_GetSysClockFreq+0x180>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	2200      	movs	r2, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	617a      	str	r2, [r7, #20]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027a6:	f04f 0b00 	mov.w	fp, #0
 80027aa:	4652      	mov	r2, sl
 80027ac:	465b      	mov	r3, fp
 80027ae:	f04f 0000 	mov.w	r0, #0
 80027b2:	f04f 0100 	mov.w	r1, #0
 80027b6:	0159      	lsls	r1, r3, #5
 80027b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027bc:	0150      	lsls	r0, r2, #5
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	ebb2 080a 	subs.w	r8, r2, sl
 80027c6:	eb63 090b 	sbc.w	r9, r3, fp
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027de:	ebb2 0408 	subs.w	r4, r2, r8
 80027e2:	eb63 0509 	sbc.w	r5, r3, r9
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	00eb      	lsls	r3, r5, #3
 80027f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027f4:	00e2      	lsls	r2, r4, #3
 80027f6:	4614      	mov	r4, r2
 80027f8:	461d      	mov	r5, r3
 80027fa:	eb14 030a 	adds.w	r3, r4, sl
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	eb45 030b 	adc.w	r3, r5, fp
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002812:	4629      	mov	r1, r5
 8002814:	028b      	lsls	r3, r1, #10
 8002816:	4621      	mov	r1, r4
 8002818:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800281c:	4621      	mov	r1, r4
 800281e:	028a      	lsls	r2, r1, #10
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002826:	2200      	movs	r2, #0
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	60fa      	str	r2, [r7, #12]
 800282c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002830:	f7fd fcca 	bl	80001c8 <__aeabi_uldivmod>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4613      	mov	r3, r2
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_GetSysClockFreq+0x180>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	3301      	adds	r3, #1
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800284c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	fbb2 f3f3 	udiv	r3, r2, r3
 8002854:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002856:	e002      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_RCC_GetSysClockFreq+0x184>)
 800285a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800285c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002860:	4618      	mov	r0, r3
 8002862:	3740      	adds	r7, #64	; 0x40
 8002864:	46bd      	mov	sp, r7
 8002866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	00f42400 	.word	0x00f42400
 8002874:	017d7840 	.word	0x017d7840

08002878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_RCC_GetHCLKFreq+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000000 	.word	0x20000000

08002890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002894:	f7ff fff0 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	0a9b      	lsrs	r3, r3, #10
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4903      	ldr	r1, [pc, #12]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	08002938 	.word	0x08002938

080028b8 <memset>:
 80028b8:	4402      	add	r2, r0
 80028ba:	4603      	mov	r3, r0
 80028bc:	4293      	cmp	r3, r2
 80028be:	d100      	bne.n	80028c2 <memset+0xa>
 80028c0:	4770      	bx	lr
 80028c2:	f803 1b01 	strb.w	r1, [r3], #1
 80028c6:	e7f9      	b.n	80028bc <memset+0x4>

080028c8 <__libc_init_array>:
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	4d0d      	ldr	r5, [pc, #52]	; (8002900 <__libc_init_array+0x38>)
 80028cc:	4c0d      	ldr	r4, [pc, #52]	; (8002904 <__libc_init_array+0x3c>)
 80028ce:	1b64      	subs	r4, r4, r5
 80028d0:	10a4      	asrs	r4, r4, #2
 80028d2:	2600      	movs	r6, #0
 80028d4:	42a6      	cmp	r6, r4
 80028d6:	d109      	bne.n	80028ec <__libc_init_array+0x24>
 80028d8:	4d0b      	ldr	r5, [pc, #44]	; (8002908 <__libc_init_array+0x40>)
 80028da:	4c0c      	ldr	r4, [pc, #48]	; (800290c <__libc_init_array+0x44>)
 80028dc:	f000 f818 	bl	8002910 <_init>
 80028e0:	1b64      	subs	r4, r4, r5
 80028e2:	10a4      	asrs	r4, r4, #2
 80028e4:	2600      	movs	r6, #0
 80028e6:	42a6      	cmp	r6, r4
 80028e8:	d105      	bne.n	80028f6 <__libc_init_array+0x2e>
 80028ea:	bd70      	pop	{r4, r5, r6, pc}
 80028ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80028f0:	4798      	blx	r3
 80028f2:	3601      	adds	r6, #1
 80028f4:	e7ee      	b.n	80028d4 <__libc_init_array+0xc>
 80028f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028fa:	4798      	blx	r3
 80028fc:	3601      	adds	r6, #1
 80028fe:	e7f2      	b.n	80028e6 <__libc_init_array+0x1e>
 8002900:	08002948 	.word	0x08002948
 8002904:	08002948 	.word	0x08002948
 8002908:	08002948 	.word	0x08002948
 800290c:	0800294c 	.word	0x0800294c

08002910 <_init>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	bf00      	nop
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr

0800291c <_fini>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	bf00      	nop
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr
